{"version":3,"sources":["components/Buttons.tsx","ethrpc.ts","assets/images/rif-id-manager.svg","app/Login/LoginScreenComponent.tsx","config/getConfig.ts","features/rLogin.ts","app/state/reducers/identity.ts","app/state/reducers/ethrdid.ts","formatters.ts","features/resolverConfig.ts","app/state/operations/ethrdid.ts","app/state/reducers/defi.ts","config/getTokenContracts.ts","storage/localStorage.ts","app/state/operations/defi.ts","app/state/reducers/datavault.ts","app/state/operations/datavault.ts","app/state/operations/identity.ts","app/Login/LoginScreenContainer.ts","assets/images/rif-id-manager-gray.svg","components/NetworkStatus/NetworkStatus.tsx","components/Tooltip/Tooltip.tsx","components/UserIcon/UserIcon.tsx","components/Modal/Modal.tsx","assets/images/icons/persona.svg","assets/images/icons/pencil.svg","components/Loading/LoadingComponent.tsx","app/Authenticated/components/Navigation.tsx","app/DataVault/components/EditPersonaModal.tsx","app/Authenticated/components/HeaderComponent.tsx","assets/images/icons/copy.svg","components/CopyButton/CopyButton.tsx","components/Panel/Panel.tsx","app/Dashboard/panels/IdentitySummary.tsx","assets/images/icons/data-vault.svg","components/ProgressBar/ProgressBar.tsx","app/Dashboard/panels/DataVaultSummary.tsx","components/BalanceRow/BalanceRow.tsx","app/Dashboard/panels/DeFiSummary.tsx","app/Dashboard/DashboardScreen.tsx","app/Dashboard/DashboardContainer.ts","assets/images/icons/declarative-details.svg","components/Modal/EditValueModal.tsx","assets/images/icons/trash.svg","components/Modal/BinaryModal.tsx","app/DataVault/components/DeleteDvContentButton.tsx","app/DataVault/components/DecryptKey.tsx","app/DataVault/components/DownloadErrorMessage.tsx","app/DataVault/panels/DeclarativeDetailsDisplay.tsx","assets/images/icons/upload.svg","app/DataVault/panels/AddDeclarativeDetails.tsx","providerContext.tsx","components/CredentialView/CredentialView.tsx","assets/images/icons/credential.svg","app/DataVault/components/PresentCredential.tsx","app/DataVault/panels/CredentialDisplay.tsx","assets/images/icons/download.svg","app/DataVault/panels/DownloadBackup.tsx","app/DataVault/DataVaultComponent.tsx","features/credentials.ts","app/DataVault/DataVaultContainer.ts","assets/images/icons/delegate.svg","app/Identity/components/DelegateComponent.tsx","app/Identity/components/OwnerComponent.tsx","assets/images/icons/key.svg","app/Identity/components/PublicKeys.tsx","assets/images/icons/computer.svg","app/Identity/components/ServiceEndPoints.tsx","app/Identity/IdentityComponent.tsx","app/Identity/IdentityContainer.ts","app/DeFi/panels/Balance.tsx","app/DeFi/DeFiComponent.tsx","app/DeFi/DeFiContainer.ts","app/Authenticated/AuthenticatedComponent.tsx","app/Authenticated/AuthenticatedContainer.ts","assets/images/powered-by-iov.svg","assets/images/powered-by-iov-gray.svg","components/RifFooter/RifFooter.tsx","app/App.tsx","reportWebVitals.ts","app/state/configureStore.ts","index.tsx"],"names":["PROVIDERS","BaseButton","styled","button","LoginScreenComponent","handleLogin","className","src","logo","alt","onClick","href","target","rel","getNetwork","provider","Eth","net_version","getAccounts","accounts","getAccountAndNetwork","Promise","all","then","chainId","parseInt","transactionListener","tx","userCallback","eth","checkInterval","setInterval","getTransactionReceipt","response","clearInterval","result","transactionHash","error","status","catch","err","message","SETTINGS","getProviderName","isNiftyWallet","NIFTY","isMetaMask","METAMASK","wc","WALLET_CONNECT","getSetting","setting","Ethereum","Mainnet","Testnet","Local","getDIDRegistryAddress","ETHR_DID_CONTRACT","getRPCUrl","RPC_URL","getBalanceName","BALANCE_NAME","rLogin","RLogin","cachedProvider","providerOptions","walletconnect","package","WalletConnectProvider","options","rpc","1","30","31","5777","supportedChains","initialState","address","identitySlice","createSlice","name","reducers","changeAccount","state","payload","changeChainId","reset","_state","actions","didDocument","id","publicKey","authentication","ethrDidSlice","resolveDid","data","createDidFormat","truncateAddressDid","value","lastIndexOf","slice","length","lastIndex","resolverProviderConfig","networks","registry","rpcUrl","resolveDidDocument","dispatch","resolve","didResolver","Resolver","getResolver","did","tokenInitialState","symbol","balance","conversion","undefined","tokens","defiSlice","addTokenData","formattedPayload","toLowerCase","filter","item","push","map","receiveBalance","receiveConversionBalance","usd","mapToCoinGeckoToAddress","getTokenContracts","ContractsMainnet","ContractsTestnet","LOCAL_STORAGE_KEY","getValueFromLocalStorage","key","settings","localStorage","getItem","JSON","parse","getSetTokenList","userAddress","allTokens","ethContract","EthContract","metadata","erc20","erc20abi","at","balanceOf","div","BN","pow","decimals","toNumber","console","log","getTokenWithMetadata","onComplete","token","getCode","Error","addCustomToken","reject","json","setItem","stringify","saveToLocalStorage","toString","getConversionRates","geckoIds","COIN_GECKO_IDS","getCoinGeckoIdsForNetwork","Axios","get","geckoId","declarativeDetails","credentials","storage","getBucket","endsWith","dataVaultSlice","receiveKeyData","content","addContentToKey","removeContentfromKey","bucket","swapContentById","receiveStorageInformation","receiveKeys","keys","forEach","createClient","serviceUrl","AllNetworks","dataVaultUrl","encryptionManager","EncryptionManager","getEncryptionPublicKey","request","method","params","decrypt","hexCypher","_hexCypher","DataVaultWebClient","authManager","AuthManager","personalSign","createDataVaultContent","client","create","deleteDataVaultContent","delete","swapDataVaultContent","swap","dataVaultStart","callback","getStorageInformation","getKeys","getDataVaultKeys","login","context","connect","setProvider","getTokenList","getBalance","Math","dvClient","_error","setDvClient","logout","removeItem","Object","startsWith","resetDV","resetDefi","resetEthrDid","resetIdentity","stateProps","dispatchProps","ownProps","NetworkStatusWrapper","span","NetworkLight","connected","chainIdToName","NetworkStatus","HoverSpan","HoverTrigger","ToolTip","hoverContent","children","UserIcon","size","circle","display","background","border","padding","margin","height","width","borderRadius","Identicon","format","saturation","style","ModalLightbox","show","ModalBody","ModalTitle","ModalCloseButton","ModalContent","Modal","title","onClose","screens","LoadingComponent","EditPersonaModal","initValue","updatePersona","useState","showModal","setShowModal","isLoading","setIsLoading","isError","setIsError","email","idnumber","phone","birthdate","values","setValues","changeInputValue","evt","useEffect","DD_NAME","DD_EMAIL","DD_ADDRESS","DD_IDNUMBER","DD_PHONE","DD_BIRTHDATE","dynamicProps","type","placeholder","onChange","disabled","PencilIcon","PersonaIcon","valueDifferentFromInit","prepareData","Header","persona","hasDataVault","rifIdManager","Navigation","selected","showDataVault","handleClick","DASHBOARD","DEFI","DATAVAULT","IDENTITY","CopyButton","showResponse","setShowResponse","copyTextField","useRef","current","select","document","execCommand","setTimeout","CopyIcon","defaultValue","ref","position","left","PanelWrapper","PanelHeader","PanelTitle","p","PanelRight","PanelContent","Panel","headerRight","IdentityInformationPanel","BarWrapper","BarProgress","ProgressBar","total","ceil","DataVaultSummary","handleButton","datavaultIcon","used","available","toLocaleString","BalanceRow","original","shorten","parseFloat","toFixed","round","DeFiSummary","featuredToken","converstion","DashboardScreen","featuredTokens","changeScreen","IdentitySummary","identity","defi","datavault","userAddr","tokenAddr","DasboardScreen","EditValueModal","onConfirm","inputType","strings","editable","setEditable","sharedProps","intro","label","submit","BinaryModal","onDeny","text","deny","confirm","DeleteDvContentButton","itemKey","deleteValue","isDeleting","setIsDeleting","trashIcon","finally","DecryptKey","handleGetContent","DownloadErrorMessage","keyError","DeclarativeDetailsDisplay","details","swapValue","getKeyContent","isDownloadError","setIsDownloadError","isEditing","setIsEditing","isGettingContent","setIsGettingContent","declarativeIcon","hasEmpty","showDownloadMessage","replace","k","includes","pencilIcon","newValue","existingItem","handleEditItem","AddDeclarativeDetails","addDeclarativeDetail","providerName","setType","setContent","uploadIcon","toUpperCase","Web3ProviderContext","React","createContext","Web3ProviderElement","initialContext","Provider","CredentialView","jwt","showRaw","setShowRaw","setError","prettyJson","setPrettyJson","jwtDecode","PresentCredential","createPresentation","setState","handleCreate","CredentialDisplay","CredentialIcon","DownloadBackup","handleDownload","initStatus","setStatus","downloadIcon","DataVaultComponent","downloadBackup","useContext","handleDelete","handleGetKeyContent","issuer","signer","vpPayload","vp","verifiableCredential","nbf","floor","Date","getTime","exp","createVerifiablePresentationJwt","getBackup","element","createElement","URL","createObjectURL","Blob","download","body","appendChild","click","remove","getDataVaultContent","DelegateComponent","delegates","addDelegate","isOwner","isAdding","setIsAdding","resetState","DelegateIcon","delegate","ethereumAddress","newDelegate","isValidAddress","isValidChecksumAddress","indexOf","OwnerComponent","owner","changeOwner","ownerDid","newOwner","PublicAttributes","publicKeys","addKey","defaults","algorithm","purpose","encoding","validity","KeyIcon","pk","publicKeyBase64","publicKeyHex","htmlFor","ServiceEndPoints","endpoints","addEndpoint","url","computerIcon","endpoint","serviceEndpoint","IdentityComponent","service","addAttribute","handleAddAttribute","PublicKeys","getOwnerFromDidDoc","controller","ethrdid","EthrDID","setDidOwner","delegateType","setAttribute","Balance","newAddress","setNewAddress","togglePopup","DeFiComponent","AuthenticatedComponent","modifyMultipleItems","screen","setScreen","HeaderComponent","items","DashboardContainer","DataVaultContainer","IdentityContainer","getPersonaDeclarativeDetails","returnValueOrEmpty","promiseArray","action","RifFooter","isLoggedIn","version","poweredGray","powered","App","AuthenticatedContainer","LoginScreenContainer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","middleware","thunk","createLogger","rootReducer","combineReducers","identityReducer","ethrdidReducer","defiReducer","dataVaultReducer","configureStore","prelodedState","createStore","applyMiddleware","ReactDOM","render","StrictMode","store","getElementById"],"mappings":"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","file":"static/js/main.fedf25db.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const BaseButton = styled.button`\n  border-radius: 5px;\n  padding: 10px 50px;\n  font-size: 18px;\n  border: none;\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\n  cursor: pointer;\n`\n","/* eslint-disable no-unused-vars */\nimport Eth from 'ethjs-query'\n\nexport const getNetwork = (provider: any) => new Eth(provider).net_version()\nexport const getAccounts = (provider: any) => new Eth(provider).accounts()\n\nexport const getAccountAndNetwork = (provider: any) =>\n  Promise.all([\n    getAccounts(provider).then((accounts: string[]) => accounts[0]),\n    getNetwork(provider).then((chainId: string) => parseInt(chainId))\n  ])\n\nexport interface transactionListenerI { result?: string, error?: string }\n\nexport const transactionListener = (provider: any, tx: string, userCallback: any) => {\n  const eth = new Eth(provider)\n\n  const checkInterval = setInterval(() =>\n    eth.getTransactionReceipt(tx)\n      .then((response: any) => {\n        if (response) {\n          clearInterval(checkInterval)\n          return userCallback({\n            result: response.transactionHash,\n            error: parseInt(response.status) !== 1 ? 'Transaction Recepit Failed' : null\n          })\n        }\n      })\n      .catch((err: Error) => userCallback({ error: err.message }))\n  , 2000)\n}\n\nexport enum PROVIDERS {\n  METAMASK = 'METAMASK',\n  NIFTY = 'NIFTY',\n  WALLET_CONNECT = 'WALLET_CONNECT'\n}\n\n/**\n * Return the Provider Name. Used to detect DataVault features\n * @param provider web3Provider\n */\nexport const getProviderName = (provider: any) => {\n  if (provider.isNiftyWallet) {\n    return PROVIDERS.NIFTY\n  }\n  if (provider.isMetaMask) {\n    return PROVIDERS.METAMASK\n  }\n  if (provider.wc) {\n    return PROVIDERS.WALLET_CONNECT\n  }\n}\n","export default __webpack_public_path__ + \"static/media/rif-id-manager.7afc1cbb.svg\";","import React from 'react'\nimport { BaseButton } from '../../components/Buttons'\nimport logo from '../../assets/images/rif-id-manager.svg'\n\ninterface LoginScreenInterface {\n  handleLogin: () => void\n}\n\nconst LoginScreenComponent: React.FC<LoginScreenInterface> = ({ handleLogin }) => {\n  return (\n    <div className=\"container login-screen\">\n      <div className=\"column\">\n        <img src={logo} alt=\"RIF identity Manager\" />\n        <h1>Sign in</h1>\n        <BaseButton className=\"blue\" onClick={handleLogin}>Connect your wallet</BaseButton>\n        <p>\n          {'Don\\'t have a wallet? '}\n          <a href=\"https://developers.rsk.co/wallet/use/\" target=\"_blank\" rel=\"noopener noreferrer\">\n            Download here\n          </a>\n        </p>\n      </div>\n    </div>\n  )\n}\n\nexport default LoginScreenComponent\n","/* eslint-disable no-unused-vars */\nimport AllNetworks from './config.json'\nimport Ethereum from './config.ethereum.json'\nimport Mainnet from './config.mainnet.json'\nimport Testnet from './config.testnet.json'\nimport Local from './config.local.json'\n\nexport enum SETTINGS {\n  ETHR_DID_CONTRACT = 'ethrDid',\n  RPC_URL = 'rpcUrl',\n  BALANCE_NAME = 'balanceName',\n  COIN_GECKO_IDS = 'coinGeckoIds'\n}\n\nconst getSetting = (chainId: number, setting: SETTINGS) => {\n  switch (chainId) {\n    case 1: return Ethereum[setting]\n    case 30: return Mainnet[setting]\n    case 31: return Testnet[setting]\n    default: return Local[setting]\n  }\n}\n\nexport const getDIDRegistryAddress = (chainId: number) => getSetting(chainId, SETTINGS.ETHR_DID_CONTRACT)\nexport const getRPCUrl = (chainId: number) => getSetting(chainId, SETTINGS.RPC_URL)\nexport const getDataVault = () => AllNetworks.dataVaultUrl\nexport const getBalanceName = (chainId: number) => getSetting(chainId, SETTINGS.BALANCE_NAME) as string\nexport const getCoinGeckoIdsForNetwork = (chainId: number) => getSetting(chainId, SETTINGS.COIN_GECKO_IDS) as string\n","import RLogin from '@rsksmart/rlogin'\nimport WalletConnectProvider from '@walletconnect/web3-provider'\nimport { getRPCUrl } from '../config/getConfig'\n\nexport const rLogin = new RLogin({\n  cachedProvider: false,\n  providerOptions: {\n    walletconnect: {\n      package: WalletConnectProvider,\n      options: {\n        rpc: {\n          1: getRPCUrl(1),\n          30: getRPCUrl(30),\n          31: getRPCUrl(31),\n          5777: getRPCUrl(5777)\n        }\n      }\n    }\n  },\n  supportedChains: [1, 30, 31, 5777]\n})\n\nexport const clearRloginStorage = () => {\n  localStorage.removeItem('RLOGIN_ACCESS_TOKEN')\n  localStorage.removeItem('RLOGIN_REFRESH_TOKEN')\n  localStorage.removeItem('walletconnect')\n\n  Object.keys(localStorage).map((key: string) => {\n    if (key.startsWith('DV_ACCESS_TOKEN') || key.startsWith('DV_REFRESH_TOKEN')) {\n      localStorage.removeItem(key)\n    }\n  })\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nexport interface IdentityState {\n  address: string\n  chainId: number | null\n}\n\ninterface ChangeAccountPayload {\n  address: string\n}\n\ninterface ChangeChainIdPayload {\n  chainId: number\n}\n\nexport const initialState: IdentityState = {\n  address: '',\n  chainId: null\n}\n\nconst identitySlice = createSlice({\n  name: 'identity',\n  initialState,\n  reducers: {\n    changeAccount (state: IdentityState, { payload: { address } }: PayloadAction<ChangeAccountPayload>) {\n      state.address = address\n    },\n    changeChainId (state: IdentityState, { payload: { chainId } }: PayloadAction<ChangeChainIdPayload>) {\n      state.chainId = chainId\n    },\n    reset: _state => initialState\n  }\n})\n\nexport const { changeAccount, changeChainId, reset } = identitySlice.actions\n\nexport default identitySlice.reducer\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { DIDDocument } from 'did-resolver'\n\nexport interface EtherdidState {\n  didDocument: DIDDocument\n}\n\ninterface ResolveDidPayload {\n  data: DIDDocument\n}\n\nexport const initialState: EtherdidState = {\n  didDocument: {\n    '@context': 'https://w3id.org/did/v1',\n    id: '',\n    publicKey: [],\n    authentication: []\n  }\n}\n\nconst ethrDidSlice = createSlice({\n  name: 'ethrdid',\n  initialState,\n  reducers: {\n    resolveDid (state: EtherdidState, { payload: { data } }: PayloadAction<ResolveDidPayload>) {\n      state.didDocument = data\n    },\n    reset: _state => initialState\n  }\n})\n\nexport const { resolveDid, reset } = ethrDidSlice.actions\n\nexport default ethrDidSlice.reducer\n","/**\n * Create Identity\n * @param address address for the did\n * @param chainId chainId\n\n */\nexport const createDidFormat = (address: string, chainId: number) => {\n  switch (chainId) {\n    case 1: return `did:ethr:${address}`\n    case 30: return `did:ethr:rsk:${address}`\n    case 31: return `did:ethr:rsk:testnet:${address}`\n    case 5777: return `did:ethr:development:${address}`\n    default: return address\n  }\n}\n\n/**\n * Truncates a DID or an Address\n * @param value DID or Address to be truncated\n */\nexport const truncateAddressDid = (value: string) => {\n  if (value.lastIndexOf(':') === -1) {\n    return `${value.slice(0, 6)}...${value.slice(value.length - 4)}`\n  }\n\n  const lastIndex = value.lastIndexOf(':')\n  return `${value.slice(0, lastIndex)}${value.slice(lastIndex, lastIndex + 7)}...${value.slice(value.length - 4)}`\n}\n","import { getDIDRegistryAddress, getRPCUrl } from '../config/getConfig'\n\nexport const resolverProviderConfig = {\n  networks: [\n    { name: 'mainnet', registry: getDIDRegistryAddress(1), rpcUrl: getRPCUrl(1) },\n    { name: 'rsk', registry: getDIDRegistryAddress(30), rpcUrl: getRPCUrl(30) },\n    { name: 'rsk:testnet', registry: getDIDRegistryAddress(31), rpcUrl: getRPCUrl(31) },\n    { name: 'development', registry: getDIDRegistryAddress(5777), rpcUrl: getRPCUrl(5777) }\n  ]\n}\n","import { Dispatch } from 'react'\nimport EthrDID from '@rsksmart/ethr-did'\nimport { getAccountAndNetwork, transactionListener, transactionListenerI } from '../../../ethrpc'\nimport { resolveDid } from '../reducers/ethrdid'\nimport { getResolver } from 'ethr-did-resolver'\nimport { DIDDocument, Resolver } from 'did-resolver'\nimport { getDIDRegistryAddress } from '../../../config/getConfig'\nimport { createDidFormat } from '../../../formatters'\nimport { resolverProviderConfig } from '../../../features/resolverConfig'\n\nconst Secp256k1VerificationKey2018 = '0x73696741757468'\n\n/**\n * Set the owner in the DID Registry. Can only be set by the owner.\n * @param provider web3 provider\n * @param newOwner new owner of the DID\n */\nexport const setDidOwner = (provider: any, newOwner: string) => (dispatch: Dispatch<any>) =>\n  new Promise((resolve, reject) => {\n    const callback = (response: transactionListenerI) =>\n      response.error ? reject(response.error) : resolve(dispatch(resolveDidDocument(provider)))\n\n    getAccountAndNetwork(provider).then(([address, chainId]) =>\n      new EthrDID({\n        address: address,\n        provider,\n        registry: getDIDRegistryAddress(parseInt(chainId))\n      })\n        .changeOwner(newOwner.toLowerCase())\n        .then((tx: string) => transactionListener(provider, tx, callback))\n        .catch((err: Error) => reject(err))\n    )\n  })\n\n/**\n * Resolve an address. Returns a DIDDocument\n * @param provider web3 provider\n */\nexport const resolveDidDocument = (provider: any) => (dispatch: Dispatch<any>) =>\n  new Promise((resolve) => {\n    getAccountAndNetwork(provider).then(([address, chainId]) => {\n      const didResolver = new Resolver(getResolver(resolverProviderConfig))\n\n      const did = createDidFormat(address, chainId)\n      didResolver.resolve(did).then((data: DIDDocument) => resolve(dispatch(resolveDid({ data }))))\n    })\n  })\n\n/**\n * Add Delegate to a persona\n * @param provider web3 provider\n * @param delegate address of the new delegate\n */\nexport const addDelegate = (provider: any, delegate: string) => (dispatch: Dispatch<any>) =>\n  new Promise((resolve, reject) => {\n    const callback = (response: transactionListenerI) =>\n      response.error ? reject(response.error) : resolve(dispatch(resolveDidDocument(provider)))\n\n    getAccountAndNetwork(provider).then(([address, chainId]) =>\n      new EthrDID({\n        address: address,\n        provider,\n        registry: getDIDRegistryAddress(parseInt(chainId))\n      })\n        .addDelegate(delegate, {\n          delegateType: Secp256k1VerificationKey2018\n        })\n        .then((tx: string) => transactionListener(provider, tx, callback))\n        .catch((err: Error) => reject(err))\n    )\n  })\n\n/**\n * Add Attribute to DID Document\n * @param provider web3 provider\n * @param type attribute type\n * @param value value\n * @param validity time in seconds valid, optional, defaults to 86400 seconds, or 1 day\n */\nexport const addAttribute = (provider: any, type: string, value: string, validity?: number) => (dispatch: Dispatch<any>) =>\n  new Promise((resolve, reject) => {\n    const callback = (response: transactionListenerI) =>\n      response.error ? reject(response.error) : resolve(dispatch(resolveDidDocument(provider)))\n\n    getAccountAndNetwork(provider).then(([address, chainId]) =>\n      new EthrDID({\n        address: address,\n        provider,\n        registry: getDIDRegistryAddress(parseInt(chainId))\n      })\n        .setAttribute(type, value, validity)\n        .then((tx: string) => transactionListener(provider, tx, callback))\n        .catch((err: Error) => reject(err))\n    )\n  })\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nexport interface Token {\n  address: string,\n  name?: string | null,\n  symbol?: string | null,\n  balance?: number | null,\n  conversion?: number\n}\n\nexport const tokenInitialState: Token = {\n  address: '',\n  name: null,\n  symbol: null,\n  balance: 0,\n  conversion: undefined\n}\n\nexport interface DefiState {\n  tokens: Token[],\n  balance: number | null,\n  conversion: number | null\n}\n\nexport const initialState = {\n  tokens: [],\n  balance: null,\n  conversion: null\n}\n\ninterface addTokenDataPayload {\n  data: Token\n}\n\nconst defiSlice = createSlice({\n  name: 'tokens',\n  initialState,\n  reducers: {\n    addTokenData (state: DefiState, { payload: { data } }: PayloadAction<addTokenDataPayload>) {\n      const formattedPayload = { ...data, address: data.address.toLowerCase() }\n      if (state.tokens.filter((item: Token) => item.address === formattedPayload.address).length === 0) {\n        state.tokens.push({ ...tokenInitialState, ...formattedPayload })\n      } else {\n        state.tokens = state.tokens.map((item: Token) =>\n          (item.address === formattedPayload.address) ? { ...item, ...formattedPayload } : item)\n      }\n    },\n    receiveBalance (state: DefiState, { payload: { balance } }: PayloadAction<{ balance: number }>) {\n      state.balance = balance\n    },\n    receiveConversionBalance (state: DefiState, { payload: { usd } }: PayloadAction<{ usd: number }>) {\n      state.conversion = usd\n    },\n    reset: _state => initialState\n  }\n})\n\nexport const { addTokenData, receiveBalance, receiveConversionBalance, reset } = defiSlice.actions\n\nexport default defiSlice.reducer\n","import ContractsTestnet from '@rsksmart/rsk-testnet-contract-metadata'\nimport ContractsMainnet from '@rsksmart/rsk-contract-metadata'\n\nexport interface TokenMetadata {\n  name: string\n  logo: string\n  erc20: boolean\n  symbol: string\n  decimals: number\n}\n\nexport interface TokenMetadataPair {\n  [address: string] : TokenMetadata\n}\n\nconst getTokenContracts = (chainId: number) => {\n  switch (chainId) {\n    case 30: return ContractsMainnet\n    case 31: return ContractsTestnet\n    default: return null\n  }\n}\n\n/**\n * Converts CoinGecko coin Ids to their address or to the defaultBalance\n * @param symbol CoinGecko's coin/token Id\n * @param chainId ChainId of the network\n */\nexport const mapToCoinGeckoToAddress = (symbol: string, chainId: number) => {\n  switch (symbol) {\n    case 'ethereum':\n    case 'bitcoin':\n      return 'defaultBalance'\n    case 'rif-token':\n      return chainId === 30\n        ? '0x2aCc95758f8b5F583470bA265Eb685a8f45fC9D5' : '0x19f64674D8a5b4e652319F5e239EFd3bc969a1FE'\n    default: return null\n  }\n}\n\nexport default getTokenContracts\n","const LOCAL_STORAGE_KEY = 'id-manager-settings'\n\nexport const saveToLocalStorage = (chainId: string, key: string, value: string) => {\n  const settings = localStorage.getItem(`${LOCAL_STORAGE_KEY}-${chainId}`)\n\n  const json = settings ? JSON.parse(settings) : {}\n  if (!json[key]) {\n    json[key] = []\n  }\n  json[key].push(value)\n\n  localStorage.setItem(`${LOCAL_STORAGE_KEY}-${chainId}`, JSON.stringify(json))\n}\n\nexport const getValueFromLocalStorage = (chainId: string, key: string) => {\n  const settings = localStorage.getItem(`${LOCAL_STORAGE_KEY}-${chainId}`)\n  if (!settings) { return null }\n\n  const json = JSON.parse(settings)\n  return json[key] || null\n}\n","import { Dispatch } from 'react'\nimport Eth from 'ethjs-query'\nimport EthContract from 'ethjs-contract'\nimport BN from 'bn.js'\nimport erc20abi from './erc20.json'\nimport { addTokenData, receiveBalance, receiveConversionBalance } from '../reducers/defi'\nimport getTokenContracts, { TokenMetadataPair, TokenMetadata, mapToCoinGeckoToAddress } from '../../../config/getTokenContracts'\nimport { saveToLocalStorage, getValueFromLocalStorage } from '../../../storage/localStorage'\nimport Axios, { AxiosResponse } from 'axios'\nimport { getCoinGeckoIdsForNetwork } from '../../../config/getConfig'\n\nexport const getTokenList = (provider: any, chainId: number, userAddress: string) => (dispatch: Dispatch<any>) => {\n  // get the set token list for the specific chainId\n  dispatch(getSetTokenList(provider, userAddress, chainId))\n\n  // get conversion rates for tokenlist that are in CoinGecko\n  dispatch(getConversionRates(chainId))\n\n  // local tokens that were saved in localStorage\n  const localTokens = getValueFromLocalStorage(chainId.toString(), 'TOKEN') ? getValueFromLocalStorage(chainId.toString(), 'TOKEN') : []\n  localTokens.map((address: string) => {\n    dispatch(getTokenWithMetadata(provider, address, userAddress))\n  })\n}\n\n/**\n * Loops through the contract metadata as specificed by @rsksmart/rsk-[testnet-]contract-metadata\n * @param provider web3 provider\n * @param userAddress users Address\n * @param chainId id of the network\n */\nconst getSetTokenList = (provider: any, userAddress: string, chainId: number) => (dispatch: Dispatch<any>) => {\n  const allTokens = getTokenContracts(chainId) as TokenMetadataPair\n  if (!allTokens) {\n    return\n  }\n\n  const eth = new Eth(provider)\n  const ethContract = new EthContract(eth)\n  for (const address in allTokens) {\n    const metadata = allTokens[address] as TokenMetadata\n\n    if (metadata.erc20) {\n      ethContract(erc20abi).at(address).balanceOf(userAddress)\n        .then((balance: BN[]) => balance[0])\n        .then((balance: BN) => balance.div(new BN(10).pow(new BN(metadata.decimals))).toNumber())\n        .then((balance: number) => {\n          if (balance !== 0) {\n            dispatch(addTokenData({ data: { address, balance, name: metadata.name, symbol: metadata.symbol } }))\n          }\n        })\n        .catch((err: Error) => console.log('balanceOf error', err))\n    }\n  }\n}\n\n/**\n * Get balance and metadata for a specific token\n * @param provider web3 Provider\n * @param address contract address\n * @param userAddress address of the user to query balance\n * @param onComplete callback function to be called\n */\nexport const getTokenWithMetadata = (provider: any, address: string, userAddress: string, onComplete?: any) => (dispatch: Dispatch<any>) => {\n  const eth = new Eth(provider)\n  const ethContract = new EthContract(eth)\n  const token = ethContract(erc20abi).at(address)\n\n  eth.getCode(address).then((result: string) => {\n    if (result === '0x0') {\n      return onComplete && onComplete(new Error('The address is not a contract'))\n    }\n\n    token.symbol().then((symbol: string[]) => symbol[0])\n      .then((symbol: string) => dispatch(addTokenData({ data: { address, symbol } })))\n      .catch((err: Error) => console.log('symbol', err.message))\n\n    token.name().then((name: string) => name[0])\n      .then((name: string) => dispatch(addTokenData({ data: { address, name } })))\n      .catch((err: Error) => console.log('name', err.message))\n\n    token.decimals().then((decimals: BN[]) => decimals[0])\n      .then((decimals: BN) => {\n        token.balanceOf(userAddress)\n          .then((balance: BN[]) => balance[0])\n          .then((balance: BN) => balance.div(new BN(10).pow(decimals)).toNumber())\n          .then((balance: number) => {\n            balance !== 0 && dispatch(addTokenData({ data: { address, balance } }))\n            onComplete && onComplete(true)\n          })\n          .catch((err: Error) => console.log('balanceOf error', err))\n      })\n      .catch(() => onComplete && onComplete(new Error('The address is a contract but not ERC20 or ERC721 token.')))\n  })\n}\n\n/**\n * Watch a custom token that the user has inputed the address for\n * @param provider web3 provider\n * @param userAddress user's address\n * @param address contract address to query\n * @param chainId chain Id\n */\nexport const addCustomToken = (provider: any, userAddress: string, address: string, chainId: number) => (dispatch: Dispatch<any>) =>\n  new Promise((resolve, reject) => {\n    const onComplete = (response: any) =>\n      response instanceof Error\n        ? reject(response)\n        : resolve(saveToLocalStorage(chainId.toString(), 'TOKEN', address))\n\n    dispatch(getTokenWithMetadata(provider, address, userAddress, onComplete))\n  })\n\n/**\n * Get the default balance of the user\n * @param provider web3 provider\n * @param address address of the user\n */\nexport const getBalance = (provider: any, address: string) => (dispatch: Dispatch<any>) =>\n  new Eth(provider).getBalance(address)\n    .then((balance: BN) => parseInt(balance.toString()))\n    .then((balance: number) => balance / Math.pow(10, 18))\n    .then((balance:number) => dispatch(receiveBalance({ balance })))\n\n/**\n * Gets the Token to USD conversion rate\n * @param address Token address, used for storing it in redux\n * @param geckoIds Ids of the coin for coingecko's AIP\n */\nexport const getConversionRates = (chainId: number) => (dispatch: Dispatch<any>) => {\n  const geckoIds = getCoinGeckoIdsForNetwork(chainId)\n  if (!geckoIds) {\n    return\n  }\n\n  Axios.get(`https://api.coingecko.com/api/v3/simple/price?ids=${geckoIds}&vs_currencies=usd`)\n    .then((response: AxiosResponse) => response.data)\n    .then((data: { [name: string]: { usd: number } }) => {\n      for (const geckoId in data) {\n        const address = mapToCoinGeckoToAddress(geckoId, chainId)\n        if (address === 'defaultBalance') {\n          dispatch(receiveConversionBalance(data[geckoId]))\n        } else if (address) {\n          dispatch(addTokenData({ data: { address: address, conversion: data[geckoId].usd } }))\n        }\n      }\n    })\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nexport interface DataVaultContent {\n  id: string,\n  content: string\n}\n\nexport interface DataVaultKey {\n  [key: string]: DataVaultContent[]\n}\n\ninterface ReceivePayLoad {\n  key: string,\n  content: DataVaultContent[]\n}\n\ninterface SwapPayLoad {\n  key: string,\n  id: string,\n  content: string\n}\n\nexport interface DataVaultStorageState {\n  used: number,\n  available: number,\n}\n\nexport interface DataVaultState {\n  declarativeDetails: DataVaultKey\n  credentials: DataVaultKey\n  storage?: DataVaultStorageState\n}\n\nexport const initialState: DataVaultState = {\n  declarativeDetails: {},\n  credentials: {},\n  storage: undefined\n}\n\nconst getBucket = (key: string) => key.endsWith('Credential') ? 'credentials' : 'declarativeDetails'\n\nconst dataVaultSlice = createSlice({\n  name: 'datavault',\n  initialState,\n  reducers: {\n    receiveKeyData (state: DataVaultState, { payload: { key, content } }: PayloadAction<ReceivePayLoad>) {\n      state[getBucket(key)][key] = content\n    },\n    addContentToKey (state: DataVaultState, { payload: { key, content } }: PayloadAction<{ key: string, content: DataVaultContent }>) {\n      state.declarativeDetails[key] ? state.declarativeDetails[key].push(content) : state.declarativeDetails[key] = [content]\n    },\n    removeContentfromKey (state: DataVaultState, { payload: { key, id } }: PayloadAction<{ key: string, id: string }>) {\n      const bucket = getBucket(key)\n      state[bucket][key] = state[bucket][key].filter((item: DataVaultContent) => item.id !== id)\n\n      if (state[bucket][key].length === 0) {\n        delete state[bucket][key]\n      }\n    },\n    swapContentById (state: DataVaultState, { payload: { key, id, content } }: PayloadAction<SwapPayLoad>) {\n      state.declarativeDetails[key] = state.declarativeDetails[key].map((item: DataVaultContent) => item.id === id ? { ...item, content } : item)\n    },\n    receiveStorageInformation (state: DataVaultState, { payload: { storage } }: PayloadAction<{ storage: DataVaultStorageState }>) {\n      state.storage = storage\n    },\n    receiveKeys (state: DataVaultState, { payload: { keys } }: PayloadAction<{ keys: string[] }>) {\n      keys.forEach((key: string) => {\n        key.endsWith('Credential') ? state.credentials[key] = [] : state.declarativeDetails[key] = []\n      })\n    },\n    reset: _state => initialState\n  }\n})\n\nexport const { receiveKeyData, addContentToKey, removeContentfromKey, swapContentById, receiveStorageInformation, receiveKeys, reset } = dataVaultSlice.actions\n\nexport default dataVaultSlice.reducer\n","import { Dispatch } from 'react'\nimport DataVaultWebClient, { AuthManager, EncryptionManager } from '@rsksmart/ipfs-cpinner-client'\n\nimport { createDidFormat } from '../../../formatters'\nimport { addContentToKey, DataVaultContent, receiveKeyData, removeContentfromKey, swapContentById, receiveStorageInformation, DataVaultStorageState, DataVaultKey, receiveKeys } from '../reducers/datavault'\nimport { getDataVault } from '../../../config/getConfig'\nimport { Backup, CreateContentResponse } from '@rsksmart/ipfs-cpinner-client/lib/types'\nimport { getProviderName, PROVIDERS } from '../../../ethrpc'\n\n/**\n * Create DataVault Clinet\n * @param provider web3 provider\n * @param address address of the user\n * @param chainId chainId of the network to create the DID\n */\nexport const createClient = (provider: any, address: string, chainId: number) => {\n  const serviceUrl = getDataVault()\n  const did = createDidFormat(address, chainId).toLowerCase()\n\n  const personalSign = (data: string) => provider.request({ method: 'personal_sign', params: [data, address] })\n  const decrypt = (hexCypher: string) => provider.request({ method: 'eth_decrypt', params: [hexCypher, address] })\n  const getEncryptionPublicKey = () => provider.request({ method: 'eth_getEncryptionPublicKey', params: [address] })\n  const mockDecrypt = (_hexCypher: string) => Promise.reject(new Error('Content could not be decrypted by your wallet.'))\n\n  const encryptionManager = getProviderName(provider) === PROVIDERS.METAMASK\n    ? new EncryptionManager({ getEncryptionPublicKey, decrypt })\n    : new EncryptionManager({ getEncryptionPublicKey: undefined, decrypt: mockDecrypt })\n\n  return new DataVaultWebClient({\n    serviceUrl,\n    authManager: new AuthManager({ did, serviceUrl, personalSign }),\n    encryptionManager\n  })\n}\n\n/**\n * Get all keys and from the datavault\n * @param client DataVault client\n */\nexport const getDataVaultKeys = (client: DataVaultWebClient) => (dispatch: Dispatch<any>) =>\n  client.getKeys()\n    .then((keys: string[]) => dispatch(receiveKeys({ keys })))\n\n/**\n * Get all content from a specific key from the datavault\n * @param client DataVault client\n * @param key string\n */\nexport const getDataVaultContent = (client: DataVaultWebClient, key: string) => (dispatch: Dispatch<any>) =>\n  client.get({ key })\n    .then((content: any) => content as DataVaultContent[])\n    .then((content: DataVaultContent[]) => dispatch(receiveKeyData({ key, content })))\n\n/**\n * Create Datavault content to an existing key or a new key\n * @param client DataVault client\n * @param key DV key\n * @param content content to be inserted\n */\nexport const createDataVaultContent = (client: DataVaultWebClient, key: string, content: string) => (dispatch: Dispatch<any>) =>\n  client.create({ key, content })\n    .then((result: CreateContentResponse) => result.id)\n    .then((id: string) => dispatch(addContentToKey({ key, content: { id, content } })))\n\n/**\n * Delete item from the datavault with its key and id\n * @param client DataVault client\n * @param key Key of the object\n * @param id ID of the content\n */\nexport const deleteDataVaultContent = (client: DataVaultWebClient, key: string, id: string) => (dispatch: Dispatch<any>) =>\n  client.delete({ key, id })\n    .then(() => dispatch(removeContentfromKey({ key, id })))\n\n/**\n * Swap content in the datavault by key, and Id\n * @param client DataVault client\n * @param key Key of object\n * @param content New content\n * @param id id of the content\n */\nexport const swapDataVaultContent = (client: DataVaultWebClient, key: string, content: string, id: string) => (dispatch: Dispatch<any>) =>\n  client.swap({ key, content, id })\n    .then(() => dispatch(swapContentById({ key, id, content })))\n\n/**\n * Helper function that loops through DataVault items and decides if key & value should be created, updated, or removed\n * @param client DataVault Client\n * @param item Key/Value DataVault pair where KEY is the DV KEY and VALUE is an array of DataVaultContent\n */\nexport const modifyMultipleItems = (client: DataVaultWebClient, values: DataVaultKey) => (dispatch: Dispatch<any>) => {\n  // eslint-disable-next-line prefer-const\n  let promiseArray: Promise<any>[] = []\n\n  Object.keys(values).map((key: string) =>\n    values[key].map((item: DataVaultContent) => {\n      let action: any\n      if (item.id === '' && item.content !== '') {\n        action = () => dispatch(createDataVaultContent(client, key, item.content))\n      } else if (item.id !== '' && item.content !== '') {\n        action = () => dispatch(swapDataVaultContent(client, key, item.content, item.id))\n      } else if (item.id !== '' && item.content === '') {\n        action = () => dispatch(deleteDataVaultContent(client, key, item.id))\n      }\n\n      promiseArray.push(new Promise((resolve) => { resolve(action()) }))\n    })\n  )\n\n  return Promise.all(promiseArray)\n}\n\n/**\n * Start the Data Vault Client\n * Request StorageInformation first, which will save the access token with the DataVault Service\n * in localStorage. Then request the content from the data vault.\n * @param provider Web3 Provider\n * @param address User Address\n * @param chainId ChainId\n * @param callback Function\n */\nexport const dataVaultStart = (provider: any, address: string, chainId: number, callback?: any) => (dispatch: Dispatch<any>) => {\n  const client = createClient(provider, address, chainId)\n\n  client.getStorageInformation()\n    .then((storage: DataVaultStorageState) => {\n      dispatch(receiveStorageInformation({ storage }))\n      dispatch(getDataVaultKeys(client))\n      callback(client)\n    })\n    .catch((err: any) => callback(null, err))\n}\n\n/**\n * Download backup text file from the DataVault\n * @param client DataVault Client\n */\nexport const downloadBackup = (client: DataVaultWebClient) =>\n  client.getBackup()\n    .then((value: Backup) => JSON.stringify(value))\n    .then((value: string) => {\n      const element = document.createElement('a')\n      element.href = URL.createObjectURL(new Blob([value], { type: 'text/plain;charset=utf-8' }))\n      element.download = 'dataVaultBackup.txt'\n      document.body.appendChild(element)\n      element.click()\n      element.remove()\n    })\n","import { Dispatch } from 'react'\n\nimport { getAccountAndNetwork } from '../../../ethrpc'\nimport { rLogin, clearRloginStorage } from '../../../features/rLogin'\n\nimport { changeAccount, changeChainId, reset as resetIdentity } from '../reducers/identity'\nimport { resolveDidDocument } from './ethrdid'\nimport { getBalance, getTokenList } from './defi'\nimport { dataVaultStart } from './datavault'\n\nimport { reset as resetDV } from '../reducers/datavault'\nimport { reset as resetDefi } from '../reducers/defi'\nimport { reset as resetEthrDid } from '../reducers/ethrdid'\n\n/**\n * Login into web3 provider via rLogin\n * Saves the web3 provider into context and saves address and chainId to redux\n * @param context the app context where the provider will be ser\n */\nexport const login = (context: any) => (dispatch: Dispatch<any>) =>\n  rLogin.connect().then((provider: any) => {\n    context.setProvider(provider)\n\n    getAccountAndNetwork(provider).then(([address, chainId]) => {\n      dispatch(changeAccount({ address }))\n      dispatch(changeChainId({ chainId: parseInt(chainId) }))\n\n      dispatch(resolveDidDocument(provider))\n      dispatch(getTokenList(provider, parseInt(chainId), address))\n      dispatch(getBalance(provider, address))\n\n      const callback = (dvClient: any, _error: any) => context.setDvClient(dvClient)\n      dispatch(dataVaultStart(provider, address, chainId, callback))\n    })\n  })\n    .catch((err: string) => console.log('rLogin Error', err))\n\nexport const logout = () => (dispatch: Dispatch<any>) => {\n  // local storage\n  clearRloginStorage()\n\n  // reducers\n  dispatch(resetDV())\n  dispatch(resetDefi())\n  dispatch(resetEthrDid())\n  dispatch(resetIdentity())\n}\n","import { connect } from 'react-redux'\nimport LoginScreenComponent from './LoginScreenComponent'\nimport { login } from '../state/operations/identity'\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  handleLogin: (context: any) => dispatch(login(context))\n})\n\nconst mergeProps = (stateProps: any, dispatchProps: any, ownProps: any) => ({\n  ...stateProps,\n  ...dispatchProps,\n  ...ownProps,\n  handleLogin: () => dispatchProps.handleLogin(ownProps.context)\n})\n\nexport default connect(null, mapDispatchToProps, mergeProps)(LoginScreenComponent)\n","export default __webpack_public_path__ + \"static/media/rif-id-manager-gray.d70174d8.svg\";","import React from 'react'\nimport styled from 'styled-components'\n\nconst NetworkStatusWrapper = styled.span`\n  display: inline-block;\n  border: 1px solid #fff;\n  border-radius: 25px;\n  padding:6px 18px !important;\n  color: #6C6B6C;\n  opacity: 1 !important;\n  border: 1px solid #CCCACD;\n  width: auto;\n`\n\n// eslint-disable-next-line no-undef\nconst NetworkLight = styled.div<{connected: boolean}>`\n  position: relative;\n  margin-left: 8px;\n  padding-left: 3px;\n  &:before {\n    position: absolute;\n    right: 98%;\n    top: 45%;\n    transform: translate(-5px, -50%);\n    content: \"\";\n    display: block;\n    width: 10px;\n    height: 10px;\n    border-radius: 50%;\n    background: ${({ connected }) => (connected ? '#40d512' : '#DC3545')};\n  }\n`\n\nexport interface NetworkStatusInterface {\n  connected: boolean;\n  name?: string;\n  chainId?: number;\n}\n\nexport const chainIdToName = (chainId: number) => {\n  switch (chainId) {\n    case 1: return 'Ethereum'\n    case 30: return 'RSK Mainnet'\n    case 31: return 'RSK Testnet'\n    default: return `Network Id ${chainId.toString()}`\n  }\n}\n\nconst NetworkStatus: React.FC<NetworkStatusInterface> = ({ connected, name, chainId }) => {\n  return (\n    <NetworkStatusWrapper className={connected ? 'connected' : 'disconnected'}>\n      <NetworkLight connected={connected}>\n        {chainId ? chainIdToName(chainId) : name}\n      </NetworkLight>\n    </NetworkStatusWrapper>\n  )\n}\n\nexport default NetworkStatus\n","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\n\ninterface TooltipInterface {\n  children: ReactNode\n  hoverContent: string | ReactNode\n  className?: string\n}\n\nconst HoverSpan = styled.span`\n  opacity: 0;\n  position: absolute;\n  background-color: #555;\n  color: #fff;\n  text-align: center;\n  padding: 5px 10px;\n  border-radius: 6px;\n  z-index: 1;\n  margin-top:25px;\n  top: 0px;\n  transition: opacity .6s;\n  display: block;\n  min-width: 250px;\n  word-break: break-all;\n`\n\nconst HoverTrigger = styled.span`\n  position: relative;\n  display: inline-block;\n  cursor: help;\n  margin-right: 20px;\n  &:hover {\n    ${HoverSpan} {\n      visibility: visible;\n      opacity: 1;\n    }\n  }\n`\n\nconst ToolTip: React.FC<TooltipInterface> = ({ hoverContent, children, className }) => (\n  <HoverTrigger className={className}>\n    {children}\n    <HoverSpan className=\"hover-content\">{hoverContent}</HoverSpan>\n  </HoverTrigger>\n)\n\nexport default ToolTip\n","import React from 'react'\nimport Identicon from 'identicon.js'\n\ninterface UserIconInterface {\n  value: string\n  size?: number\n}\n\nconst UserIcon: React.FC<UserIconInterface> = ({ value, size }) => {\n  const options = {\n    format: 'svg',\n    background: [71, 196, 225, 255],\n    margin: '.22',\n    saturation: '.8'\n  }\n\n  const circle = {\n    display: 'inline-block',\n    background: '#FFFFFF',\n    border: '2px solid #919191',\n    padding: '2px',\n    margin: '0',\n    height: `${size || 50}px`,\n    width: `${size || 50}px`,\n    borderRadius: '50%'\n  }\n\n  return (\n    <img\n      src={`data:image/svg+xml;base64,${new Identicon(value, options).toString()}`}\n      alt={value}\n      className=\"user-icon\"\n      style={circle}\n    />\n  )\n}\n\nexport default UserIcon\n","/* eslint-disable no-unused-vars */\nimport React, { ReactNode } from 'react'\nimport styled from 'styled-components'\n\ninterface ModalLightboxProps {\n  show: boolean;\n}\n\n// eslint-disable-next-line no-undef\nexport const ModalLightbox = styled.div<ModalLightboxProps>`\nfont-family: Rubik;\ntransition: opacity 0.1s ease-in-out;\ntext-align: center;\nposition: fixed;\nwidth: 100vw;\nheight: 100vh;\nmargin-left: -50vw;\ntop: 0;\nleft: 50%;\nz-index: 2;\nwill-change: opacity;\nbackground-color: rgba(0, 0, 0, 0.4);\nopacity: 1;\nvisibility: ${({ show }) => (show ? 'visible' : 'hidden')};\npointer-events: ${({ show }) => (show ? 'auto' : 'none')};\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n\n& * {\n  box-sizing: border-box !important;\n}\n`\n\nconst ModalBody = styled.div`\n  position: relative;\n  width: 100%;\n  max-width: 500px;\n  background: #ffffff;\n  border-radius: 20px;\n  overflow: hidden;\n`\n\nconst ModalTitle = styled.div`\n  background: #F2F2F2;\n  font-size: 16px;\n  padding: 15px 0\n`\n\nconst ModalCloseButton = styled.button`\n  position: absolute;\n  top: 0;\n  right: 10px;\n  color: #C4C4C4;\n  font-size: 2em;\n  border: none;\n  background: none;\n  cursor: pointer;\n  font-weight: 300;\n  &:after {\n    content: '\\\\d7';\n  }\n`\n\nconst ModalContent = styled.div`\n  background: #ffffff;\n  padding: 0 20px 15px 20px;\n`\n\ninterface PanelInterface {\n  children: ReactNode\n  show: boolean\n  title?: string | ReactNode\n  className?: string\n  onClose: () => void\n}\n\nconst Modal: React.FC<PanelInterface> = ({ children, show, title, className, onClose }) => (\n  show\n    ? (\n      <ModalLightbox show={show} className={className}>\n        <ModalBody>\n          <ModalTitle className=\"modal-title\">\n            {title}\n            <ModalCloseButton className=\"close\" onClick={onClose} />\n          </ModalTitle>\n          <ModalContent className=\"modal-content\">\n            {children}\n          </ModalContent>\n        </ModalBody>\n      </ModalLightbox>\n    )\n    : <></>\n)\n\nexport default Modal\n","export default __webpack_public_path__ + \"static/media/persona.f3d51fc5.svg\";","export default __webpack_public_path__ + \"static/media/pencil.afa201a1.svg\";","import styled from 'styled-components'\n\n// reference: https://projects.lukehaas.me/css-loaders/\n\nconst LoadingComponent = styled.div`\n  color: #47C4E1;\n  font-size: 15px;\n  margin: 50px auto;\n  width: 1em;\n  height: 1em;\n  border-radius: 50%;\n  position: relative;\n  text-indent: -9999em;\n  -webkit-animation: load4 1.3s infinite linear;\n  animation: load4 1.3s infinite linear;\n  -webkit-transform: translateZ(0);\n  -ms-transform: translateZ(0);\n  transform: translateZ(0);\n\n  @-webkit-keyframes load4 {\n    0%,\n    100% {\n      box-shadow: 0 -3em 0 0.2em, 2em -2em 0 0em, 3em 0 0 -1em, 2em 2em 0 -1em, 0 3em 0 -1em, -2em 2em 0 -1em, -3em 0 0 -1em, -2em -2em 0 0;\n    }\n    12.5% {\n      box-shadow: 0 -3em 0 0, 2em -2em 0 0.2em, 3em 0 0 0, 2em 2em 0 -1em, 0 3em 0 -1em, -2em 2em 0 -1em, -3em 0 0 -1em, -2em -2em 0 -1em;\n    }\n    25% {\n      box-shadow: 0 -3em 0 -0.5em, 2em -2em 0 0, 3em 0 0 0.2em, 2em 2em 0 0, 0 3em 0 -1em, -2em 2em 0 -1em, -3em 0 0 -1em, -2em -2em 0 -1em;\n    }\n    37.5% {\n      box-shadow: 0 -3em 0 -1em, 2em -2em 0 -1em, 3em 0em 0 0, 2em 2em 0 0.2em, 0 3em 0 0em, -2em 2em 0 -1em, -3em 0em 0 -1em, -2em -2em 0 -1em;\n    }\n    50% {\n      box-shadow: 0 -3em 0 -1em, 2em -2em 0 -1em, 3em 0 0 -1em, 2em 2em 0 0em, 0 3em 0 0.2em, -2em 2em 0 0, -3em 0em 0 -1em, -2em -2em 0 -1em;\n    }\n    62.5% {\n      box-shadow: 0 -3em 0 -1em, 2em -2em 0 -1em, 3em 0 0 -1em, 2em 2em 0 -1em, 0 3em 0 0, -2em 2em 0 0.2em, -3em 0 0 0, -2em -2em 0 -1em;\n    }\n    75% {\n      box-shadow: 0em -3em 0 -1em, 2em -2em 0 -1em, 3em 0em 0 -1em, 2em 2em 0 -1em, 0 3em 0 -1em, -2em 2em 0 0, -3em 0em 0 0.2em, -2em -2em 0 0;\n    }\n    87.5% {\n      box-shadow: 0em -3em 0 0, 2em -2em 0 -1em, 3em 0 0 -1em, 2em 2em 0 -1em, 0 3em 0 -1em, -2em 2em 0 0, -3em 0em 0 0, -2em -2em 0 0.2em;\n    }\n  }\n  @keyframes load4 {\n    0%,\n    100% {\n      box-shadow: 0 -3em 0 0.2em, 2em -2em 0 0em, 3em 0 0 -1em, 2em 2em 0 -1em, 0 3em 0 -1em, -2em 2em 0 -1em, -3em 0 0 -1em, -2em -2em 0 0;\n    }\n    12.5% {\n      box-shadow: 0 -3em 0 0, 2em -2em 0 0.2em, 3em 0 0 0, 2em 2em 0 -1em, 0 3em 0 -1em, -2em 2em 0 -1em, -3em 0 0 -1em, -2em -2em 0 -1em;\n    }\n    25% {\n      box-shadow: 0 -3em 0 -0.5em, 2em -2em 0 0, 3em 0 0 0.2em, 2em 2em 0 0, 0 3em 0 -1em, -2em 2em 0 -1em, -3em 0 0 -1em, -2em -2em 0 -1em;\n    }\n    37.5% {\n      box-shadow: 0 -3em 0 -1em, 2em -2em 0 -1em, 3em 0em 0 0, 2em 2em 0 0.2em, 0 3em 0 0em, -2em 2em 0 -1em, -3em 0em 0 -1em, -2em -2em 0 -1em;\n    }\n    50% {\n      box-shadow: 0 -3em 0 -1em, 2em -2em 0 -1em, 3em 0 0 -1em, 2em 2em 0 0em, 0 3em 0 0.2em, -2em 2em 0 0, -3em 0em 0 -1em, -2em -2em 0 -1em;\n    }\n    62.5% {\n      box-shadow: 0 -3em 0 -1em, 2em -2em 0 -1em, 3em 0 0 -1em, 2em 2em 0 -1em, 0 3em 0 0, -2em 2em 0 0.2em, -3em 0 0 0, -2em -2em 0 -1em;\n    }\n    75% {\n      box-shadow: 0em -3em 0 -1em, 2em -2em 0 -1em, 3em 0em 0 -1em, 2em 2em 0 -1em, 0 3em 0 -1em, -2em 2em 0 0, -3em 0em 0 0.2em, -2em -2em 0 0;\n    }\n    87.5% {\n      box-shadow: 0em -3em 0 0, 2em -2em 0 -1em, 3em 0 0 -1em, 2em 2em 0 -1em, 0 3em 0 -1em, -2em 2em 0 0, -3em 0em 0 0, -2em -2em 0 0.2em;\n    }\n  }\n`\n\nexport default LoadingComponent\n","/* eslint-disable no-unused-vars */\nimport React from 'react'\n\nexport enum screens {\n  DASHBOARD = 'dashboard',\n  DATAVAULT = 'datavault',\n  IDENTITY = 'identity',\n  DEFI = 'defi'\n}\n\ninterface NavigationInterface {\n  selected: string\n  handleClick: (screen: screens) => void\n  showDataVault?: boolean\n  logout: () => void\n}\n\nconst Navigation: React.FC<NavigationInterface> = ({ selected, showDataVault, handleClick, logout }) => (\n  <div className=\"container\">\n    <div className=\"column\">\n      <ul className=\"navigation\">\n        <li className={selected === screens.DASHBOARD ? 'dashboard active' : 'dashboard'}>\n          <button onClick={() => handleClick(screens.DASHBOARD)}>Dashboard</button>\n        </li>\n        <li className={selected === screens.DEFI ? 'defi active' : 'defi'}>\n          <button onClick={() => handleClick(screens.DEFI)}>DeFi Assets</button>\n        </li>\n        {showDataVault && (\n          <li className={selected === screens.DATAVAULT ? 'datavault active' : 'datavault'}>\n            <button onClick={() => handleClick(screens.DATAVAULT)}>Data Vault</button>\n          </li>\n        )}\n        <li className={selected === screens.IDENTITY ? 'active' : ''}>\n          <button onClick={() => handleClick(screens.IDENTITY)}>Manage Identity</button>\n        </li>\n        <li className=\"disabled\">Request Credentials</li>\n        <li className=\"disabled\">My Dapps</li>\n        <li className=\"logout\"><button onClick={logout}>Logout</button></li>\n      </ul>\n    </div>\n  </div>\n)\n\nexport default Navigation\n","import React, { useEffect, useState } from 'react'\nimport Modal from '../../../components/Modal/Modal'\nimport PersonaIcon from '../../../assets/images/icons/persona.svg'\nimport PencilIcon from '../../../assets/images/icons/pencil.svg'\nimport { truncateAddressDid } from '../../../formatters'\nimport { BaseButton } from '../../../components/Buttons'\nimport LoadingComponent from '../../../components/Loading/LoadingComponent'\nimport { DataVaultKey } from '../../state/reducers/datavault'\n\ninterface EditPersonaModalInterface {\n  did?: string\n  initValue: DataVaultKey\n  updatePersona: (items: DataVaultKey) => Promise<any>\n}\n\nconst EditPersonaModal: React.FC<EditPersonaModalInterface> = ({ did, initValue, updatePersona }) => {\n  if (!did) {\n    return <></>\n  }\n\n  const [showModal, setShowModal] = useState<boolean>(false)\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [isError, setIsError] = useState<string | null>(null)\n  const [values, setValues] = useState<{ name: string, email: string, address: string, idnumber: string, phone: string, birthdate: string}>({\n    name: '',\n    email: '',\n    address: '',\n    idnumber: '',\n    phone: '',\n    birthdate: ''\n  })\n\n  const changeInputValue = (evt: { target: HTMLInputElement }) =>\n    setValues({ ...values, [evt.target.id]: evt.target.value })\n\n  useEffect(() => {\n    setIsError(null)\n    setIsLoading(false)\n\n    setValues({\n      name: initValue.DD_NAME[0].content,\n      email: initValue.DD_EMAIL[0].content,\n      address: initValue.DD_ADDRESS[0].content,\n      idnumber: initValue.DD_IDNUMBER[0].content,\n      phone: initValue.DD_PHONE[0].content,\n      birthdate: initValue.DD_BIRTHDATE[0].content\n    })\n  }, [initValue])\n\n  const save = () => {\n    setIsLoading(true)\n    setIsError(null)\n\n    const valueDifferentFromInit = (key: string, content: string) =>\n      (initValue[key][0].content !== content) ? [{ ...initValue[key][0], content }] : []\n\n    const prepareData = {\n      DD_NAME: valueDifferentFromInit('DD_NAME', values.name),\n      DD_EMAIL: valueDifferentFromInit('DD_EMAIL', values.email),\n      DD_ADDRESS: valueDifferentFromInit('DD_ADDRESS', values.address),\n      DD_IDNUMBER: valueDifferentFromInit('DD_IDNUMBER', values.idnumber),\n      DD_PHONE: valueDifferentFromInit('DD_PHONE', values.phone),\n      DD_BIRTHDATE: valueDifferentFromInit('DD_BIRTHDATE', values.birthdate)\n    }\n\n    updatePersona(prepareData)\n      .then(() => {\n        setIsLoading(false)\n        setShowModal(false)\n      })\n      .catch((err: Error) => {\n        setIsLoading(false)\n        setIsError(err.message)\n      })\n  }\n\n  const dynamicProps = (type:string) => ({ placeholder: `Persona ${type}`, id: type, type: 'text', className: 'line', onChange: changeInputValue, disabled: isLoading })\n\n  return (\n    <>\n      <button className=\"edit icon\" onClick={() => setShowModal(true)}>\n        <img src={PencilIcon} alt=\"Edit Persona\" />\n      </button>\n\n      <Modal\n        show={showModal}\n        onClose={() => setShowModal(false)}\n        title={<><img src={PersonaIcon} alt=\"pesona\" /> Edit persona</>}\n        className=\"edit-personal-modal\"\n      >\n        <div>\n          <h2>Edit Persona</h2>\n          {truncateAddressDid(did)}\n          <p>You can edit your personal that be saved in your data vault.</p>\n\n          <p><label>Name: <input value={values.name} {...dynamicProps('name')} /></label></p>\n          <p><label>Email: <input value={values.email} {...dynamicProps('email')} /></label></p>\n          <p><label>Address: <input value={values.address} {...dynamicProps('address')} /></label></p>\n          <p><label>Id Number: <input value={values.idnumber} {...dynamicProps('idnumber')} /></label></p>\n          <p><label>Phone Number: <input value={values.phone} {...dynamicProps('phone')} /></label></p>\n          <p><label>Birthdate: <input value={values.birthdate} {...dynamicProps('birthdate')} /></label></p>\n\n          <p>\n            <BaseButton\n              className=\"save blue\"\n              onClick={save}\n              disabled={isLoading}\n            >Save</BaseButton></p>\n\n          {isError && <div className=\"alert error\">{isError}</div>}\n          {isLoading && <LoadingComponent />}\n        </div>\n      </Modal>\n    </>\n  )\n}\n\nexport default EditPersonaModal\n","import React from 'react'\nimport rifIdManager from '../../../assets/images/rif-id-manager-gray.svg'\nimport NetworkStatus from '../../../components/NetworkStatus/NetworkStatus'\nimport ToolTip from '../../../components/Tooltip/Tooltip'\nimport { truncateAddressDid } from '../../../formatters'\nimport UserIcon from '../../../components/UserIcon/UserIcon'\nimport EditPersonaModal from '../../DataVault/components/EditPersonaModal'\nimport { DataVaultKey } from '../../state/reducers/datavault'\n\ninterface HeaderComponentInterface {\n  did?: string\n  chainId?: number\n  persona: DataVaultKey\n  hasDataVault: boolean\n  updatePersona: (items: DataVaultKey) => Promise<any>\n}\n\nconst Header: React.FC<HeaderComponentInterface> = ({ did, chainId, persona, hasDataVault, updatePersona }) => (\n  <header className=\"container\">\n    <div className=\"columnDouble branding\">\n      <div className=\"logo\">\n        <img src={rifIdManager} alt=\"RIF Id Manager\" />\n      </div>\n      <h1 className=\"persona\">\n        {did && (\n          <>\n            <UserIcon value={did} size={40} />\n            {persona.DD_NAME[0].content !== ''\n              ? <div>{persona.DD_NAME[0].content}</div>\n              : <ToolTip hoverContent={did}><div>{truncateAddressDid(did)}</div></ToolTip>\n            }\n          </>\n        )}\n      </h1>\n      {hasDataVault && (\n        <EditPersonaModal\n          did={did}\n          initValue={persona}\n          updatePersona={updatePersona}\n        />\n      )}\n    </div>\n    <div className=\"column network\">\n      {chainId && <NetworkStatus connected chainId={chainId} />}\n    </div>\n  </header>\n)\n\nexport default Header\n","export default __webpack_public_path__ + \"static/media/copy.713b200d.svg\";","import React, { useRef, useState } from 'react'\nimport CopyIcon from '../../assets/images/icons/copy.svg'\n\ninterface CopyButtonInterface {\n  value: string\n}\n\nconst CopyButton: React.FC<CopyButtonInterface> = ({ value }) => {\n  const [showResponse, setShowResponse] = useState<boolean>(false)\n  const copyTextField = useRef<HTMLInputElement>(null)\n\n  const handleClick = () => {\n    setShowResponse(true)\n    copyTextField.current && copyTextField.current.select()\n    document.execCommand('copy')\n    setTimeout(() => {\n      setShowResponse(false)\n    }, 1000)\n  }\n\n  return (\n    <span className=\"copyButton\">\n      <button type=\"button\" onClick={handleClick} className=\"icon\">\n        <img src={CopyIcon} alt=\"Copy text\" />\n      </button>\n      {showResponse && <span className=\"response\">Copied to clipboard.</span>}\n      <input\n        type=\"text\"\n        className=\"copyText\"\n        defaultValue={value}\n        ref={copyTextField}\n        style={{ position: 'absolute', left: '-10000px' }}\n      />\n    </span>\n  )\n}\n\nexport default CopyButton\n","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\n\nconst PanelWrapper = styled.div`\n  background: #FFFFFF;\n  box-shadow: 0px 4px 20px rgba(145, 145, 145, 0.1);\n  border-radius: 20px;\n  padding: 10px 0;\n`\nconst PanelHeader = styled.div`\n  padding: 10px 25px 10px 25px;\n  border-bottom: 1px solid #F2F2F2;\n  margin: 0 0 15px 0;\n`\n\nconst PanelTitle = styled.p`\n  display: inline-block;\n  font-weight: 600 !important;\n  font-size: 16px;\n  line-height: 19px;\n  color: #50555c;\n  margin: 0;\n  padding: 0;\n`\n\nconst PanelRight = styled.div`\n  float: right;\n`\n\nconst PanelContent = styled.div`\n  padding: 25px 50px;\n`\n\ninterface PanelInterface {\n  title?: string | ReactNode\n  className?: string\n  headerRight?: string | ReactNode\n  children: ReactNode\n}\n\nconst Panel: React.FC<PanelInterface> = ({ title, headerRight, children, className }) => (\n  <PanelWrapper className={`panel ${className}`}>\n    {title && (\n      <PanelHeader className=\"panel-header\">\n        <PanelTitle className=\"panel-title\">{title}</PanelTitle>\n        {headerRight && <PanelRight className=\"panel-right\">{headerRight}</PanelRight>}\n      </PanelHeader>\n    )}\n    <PanelContent className=\"panel-content\">\n      {children}\n    </PanelContent>\n  </PanelWrapper>\n)\n\nexport default Panel\n","import React from 'react'\nimport CopyButton from '../../../components/CopyButton/CopyButton'\nimport Panel from '../../../components/Panel/Panel'\nimport ToolTip from '../../../components/Tooltip/Tooltip'\nimport { createDidFormat, truncateAddressDid } from '../../../formatters'\n\ninterface IdentityInformationPanelI {\n  address: string\n  chainId: number\n}\n\nconst IdentityInformationPanel: React.FC<IdentityInformationPanelI> = ({ address, chainId }) => {\n  const did = createDidFormat(address, chainId)\n  return (\n    <div className=\"container\">\n      <div className=\"column\">\n        <Panel\n          title=\"Persona information\"\n          className=\"identity-information\"\n        >\n          <div className=\"container\">\n            <div className=\"column\">\n              <h2>Persona DID</h2>\n              <p className=\"value\">\n                <ToolTip hoverContent={did}>{truncateAddressDid(did)}</ToolTip>\n                <CopyButton value={did} />\n              </p>\n            </div>\n            <div className=\"column\">\n              <h2>Persona Address</h2>\n              <p className=\"value\">\n                {address}\n                <CopyButton value={address} />\n              </p>\n            </div>\n          </div>\n        </Panel>\n      </div>\n    </div>\n  )\n}\n\nexport default IdentityInformationPanel\n","export default __webpack_public_path__ + \"static/media/data-vault.c8c9253d.svg\";","import React from 'react'\nimport styled from 'styled-components'\n\ninterface ProgressBarInterface {\n  total: number,\n  value: number\n}\n\nconst BarWrapper = styled.div`\n  height: 20px;\n  position: relative;\n  background: #EAEAEA;\n  -moz-border-radius: 25px;\n  -webkit-border-radius: 25px;\n  border-radius: 12.5px;\n  padding: 10px;\n  box-shadow: inset 0 -1px 1px rgba(255,255,255,0.3);\n`\n\nconst BarProgress = styled.div`\n  display: block;\n  height: 100%;\n  border-top-right-radius: 4px;\n  border-bottom-right-radius: 4px;\n  border-top-left-radius: 8px;\n  border-bottom-left-radius: 8px;\n  background-color: #47C4E1;\n  box-shadow:\n    inset 0 2px 9px  rgba(255,255,255,0.3),\n    inset 0 -2px 6px rgba(0,0,0,0.4);\n  position: relative;\n  overflow: hidden;\n  }\n`\n\nconst ProgressBar: React.FC<ProgressBarInterface> = ({ total, value }) => {\n  const width = value < total ? Math.ceil((value * 100) / total) : 100\n  return (\n    <BarWrapper className=\"progress-wrapper\">\n      <BarProgress className=\"progress\" style={{ width: `${width}%` }}></BarProgress>\n    </BarWrapper>\n  )\n}\n\nexport default ProgressBar\n","import React from 'react'\nimport Panel from '../../../components/Panel/Panel'\nimport datavaultIcon from '../../../assets/images/icons/data-vault.svg'\nimport { BaseButton } from '../../../components/Buttons'\nimport ProgressBar from '../../../components/ProgressBar/ProgressBar'\nimport ToolTip from '../../../components/Tooltip/Tooltip'\nimport { DataVaultStorageState } from '../../state/reducers/datavault'\n\ninterface DataVaultSummaryInterface {\n  storage?: DataVaultStorageState\n  handleButton: () => void\n}\n\nconst DataVaultSummary: React.FC<DataVaultSummaryInterface> = ({ storage, handleButton }) =>\n  storage ? (\n    <Panel title={<><img src={datavaultIcon} alt=\"DataVault\" /> DataVault Summary</>} className=\"dataVault\">\n      <h2>Storage Usage</h2>\n      <div className=\"container\">\n        <div className=\"columnDouble\">\n          <ToolTip className=\"tooltip-progress\" hoverContent={<p>{storage.used} of {(storage.available + storage.used).toLocaleString()} bytes</p>}>\n            <ProgressBar total={(storage.available + storage.used)} value={storage.used} />\n          </ToolTip>\n        </div>\n        <div className=\"column\">\n          <BaseButton onClick={handleButton} className=\"turquoise panel-button\">DataVault</BaseButton>\n        </div>\n      </div>\n    </Panel>\n  )\n    : <></>\n\nexport default DataVaultSummary\n","import React from 'react'\n\ninterface BalanceRowInterface {\n  name?: string | null\n  balance?: number | null\n  symbol?: string | null\n  className?: string\n  conversion?: number\n}\n\nconst BalanceRow: React.FC<BalanceRowInterface> = ({ name, balance, symbol, className, conversion }) => {\n  const shorten = (original: number | null | undefined) => {\n    if (!original) { return original }\n    const shorten = parseFloat(original.toFixed(6))\n    return shorten === original ? original : shorten\n  }\n\n  return (\n    <div className={className ? `balance-row ${className}` : 'balance-row'}>\n      <h2>{name}</h2>\n      <div>\n        <span className=\"balance\">{shorten(balance)}</span>\n        <span className=\"symbol\">{symbol}</span>\n        {(conversion && balance) && <span className=\"conversion\">${Math.round(conversion * balance * 100) / 100} USD</span>}\n      </div>\n    </div>\n  )\n}\n\nexport default BalanceRow\n","import React from 'react'\nimport BalanceRow from '../../../components/BalanceRow/BalanceRow'\nimport { BaseButton } from '../../../components/Buttons'\nimport Panel from '../../../components/Panel/Panel'\nimport { getBalanceName } from '../../../config/getConfig'\nimport { Token } from '../../state/reducers/defi'\n\ninterface DeFiSummaryInterface {\n  balance: number | null\n  converstion: number | null\n  chainId?: number | null\n  featuredToken?: Token\n  handleButton: () => void\n}\n\nconst DeFiSummary: React.FC<DeFiSummaryInterface> = ({ balance, chainId, featuredToken, converstion, handleButton }) =>\n  balance && chainId\n    ? (\n      <Panel title={<>DeFi Summary</>} className=\"defi\">\n        <div className=\"container balance\">\n          <div className=\"columnDobule\">\n            <BalanceRow\n              name=\"Balance\"\n              balance={balance}\n              symbol={getBalanceName(chainId)}\n              conversion={converstion || undefined}\n            />\n            {featuredToken && (\n              <BalanceRow\n                name={featuredToken.name}\n                balance={featuredToken.balance}\n                symbol={featuredToken.symbol}\n                conversion={featuredToken.conversion || undefined}\n              />\n            )}\n          </div>\n        </div>\n        <BaseButton onClick={handleButton} className=\"turquoise\">More Defi</BaseButton>\n      </Panel>\n    )\n    : <></>\n\nexport default DeFiSummary\n","import React from 'react'\nimport IdentitySummary from './panels/IdentitySummary'\nimport DataVaultSummary from './panels/DataVaultSummary'\nimport { screens } from '../Authenticated/components/Navigation'\nimport { DataVaultStorageState } from '../state/reducers/datavault'\nimport DeFiSummary from './panels/DeFiSummary'\nimport { Token } from '../state/reducers/defi'\n\ninterface DashboardScreenInterface {\n  chainId?: number | null\n  address: string | null\n  storage?: DataVaultStorageState\n  balance: number | null\n  featuredTokens?: Token[]\n  converstion: number | null\n  changeScreen: (screen: string) => void\n}\n\nconst DashboardScreen: React.FC<DashboardScreenInterface> = ({\n  chainId, address, storage, balance, featuredTokens, converstion, changeScreen\n}) => {\n  return (\n    <div className=\"content dashboard\">\n      {address && chainId && <IdentitySummary address={address} chainId={chainId} />}\n      <div className=\"container\">\n        <div className=\"column\">\n          <DeFiSummary\n            balance={balance}\n            converstion={converstion}\n            chainId={chainId}\n            featuredToken={featuredTokens ? featuredTokens[0] : undefined}\n            handleButton={() => changeScreen(screens.DEFI)}\n          />\n        </div>\n        <div className=\"column\">\n          <DataVaultSummary storage={storage} handleButton={() => changeScreen(screens.DATAVAULT)} />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default DashboardScreen\n","import { connect } from 'react-redux'\nimport { stateInterface } from '../state/configureStore'\nimport DasboardScreen from './DashboardScreen'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { AnyAction } from 'redux'\nimport { addCustomToken } from '../state/operations/defi'\nimport { Token } from '../state/reducers/defi'\n\nconst mapStateToProps = (state: stateInterface) => ({\n  address: state.identity.address,\n  chainId: state.identity.chainId,\n  tokens: state.defi.tokens,\n  balance: state.defi.balance,\n  converstion: state.defi.conversion,\n  featuredTokens: state.defi.tokens.filter((token: Token) => token.symbol === 'RIF' || token.symbol === 'tRIF'),\n  storage: state.datavault.storage\n})\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<stateInterface, {}, AnyAction>) => ({\n  addCustomToken: (provider: any, userAddr: string, tokenAddr: string, chainId: number) => dispatch(addCustomToken(provider, userAddr, tokenAddr, chainId))\n})\n\nconst mergeProps = (stateProps: any, dispatchProps: any, ownProps: any) => ({\n  ...stateProps,\n  ...dispatchProps,\n  ...ownProps\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps, mergeProps)(DasboardScreen)\n","export default __webpack_public_path__ + \"static/media/declarative-details.0f849d72.svg\";","import React, { useState, useEffect } from 'react'\nimport { BaseButton } from '../Buttons'\nimport LoadingComponent from '../Loading/LoadingComponent'\nimport Modal from './Modal'\n\ninterface EditValueModalInterface {\n  show: boolean\n  className?: string\n  onConfirm: (value: string) => void\n  onClose: () => void\n  disabled?: boolean\n  isLoading?: boolean\n  error?: string | null\n  initValue?: string\n  inputType?: 'input' | 'textarea'\n  strings?: {\n    title?: string,\n    intro?: string,\n    label?: string,\n    placeholder?: string,\n    submit?: string,\n  }\n}\n\nconst EditValueModal: React.FC<EditValueModalInterface> = ({\n  show, className, onConfirm, onClose, disabled, isLoading, error, initValue, inputType, strings\n}) => {\n  const [editable, setEditable] = useState<string>('')\n  const sharedProps = {\n    onChange: (evt: { target: { value: React.SetStateAction<string> } }) => setEditable(evt.target.value as string),\n    disabled,\n    className: 'editable line',\n    placeholder: strings?.placeholder,\n    value: editable || ''\n  }\n\n  useEffect(() => {\n    setEditable(initValue || '')\n  }, [initValue])\n\n  return (\n    <Modal show={show} className={className} onClose={onClose} title={strings?.title || 'Edit Value'}>\n      <p className=\"intro-text\">{strings?.intro}</p>\n      <p>\n        <label>{strings?.label || 'Value:'}</label>\n        {inputType === 'textarea'\n          ? <textarea {...sharedProps} />\n          : <input type=\"text\" {...sharedProps} />}\n      </p>\n      <p>\n        <BaseButton\n          onClick={() => onConfirm(editable)}\n          disabled={disabled}\n          className=\"submit\"\n        >{strings?.submit || 'Submit'}</BaseButton>\n      </p>\n      {isLoading && <LoadingComponent />}\n      {error && (\n        <div className=\"error container\">\n          <div className=\"alert error\">{error}</div>\n        </div>\n      )}\n    </Modal>\n  )\n}\n\nexport default EditValueModal\n","export default __webpack_public_path__ + \"static/media/trash.4ceb20aa.svg\";","import React from 'react'\nimport { BaseButton } from '../Buttons'\nimport Modal from './Modal'\n\ninterface BinaryModalInterface {\n  show: boolean\n  title?: string\n  disabled?: boolean\n  strings?: {\n    text?: string\n    confirm?: string\n    deny?: string\n  }\n  className?: string\n  error?: string | null\n  onConfirm: () => void\n  onDeny?: () => void\n  onClose: () => void\n}\n\nconst BinaryModal: React.FC<BinaryModalInterface> = ({\n  show, title, disabled, className, error, onConfirm, onClose, onDeny, strings\n}) => {\n  return (\n    <Modal show={show} className={className} onClose={onClose} title={title || 'Are you sure?'}>\n      <p>{strings?.text || 'Are you sure?'}</p>\n      <div className=\"container\">\n        <div className=\"column\">\n          <BaseButton onClick={onDeny || onClose} className=\"deny gray full\" disabled={disabled || false}>\n            {strings?.deny || 'Deny'}\n          </BaseButton>\n        </div>\n        <div className=\"column\">\n          <BaseButton onClick={onConfirm} className=\"confirm gray full\" disabled={disabled || false}>\n            {strings?.confirm || 'Confirm'}\n          </BaseButton>\n        </div>\n      </div>\n      {error && <div className=\"alert error\">{error}</div>}\n    </Modal>\n  )\n}\n\nexport default BinaryModal\n","import React, { useState } from 'react'\nimport trashIcon from '../../../assets/images/icons/trash.svg'\nimport BinaryModal from '../../../components/Modal/BinaryModal'\nimport { DataVaultContent } from '../../state/reducers/datavault'\n\ninterface Interface {\n  itemKey: string\n  item: DataVaultContent\n  deleteValue: (key: string, id: string) => Promise<any>\n}\n\nconst DeleteDvContentButton: React.FC<Interface> = ({\n  itemKey, item, deleteValue\n}) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [isError, setIsError] = useState<null | string>(null)\n  const [isDeleting, setIsDeleting] = useState<boolean>(false)\n\n  const handleDeleteItem = () => {\n    setIsLoading(true)\n    setIsError(null)\n\n    deleteValue(itemKey, item.id)\n      .then(() => setIsDeleting(false))\n      .catch((err: Error) => setIsError(err.message))\n      .finally(() => setIsLoading(false))\n  }\n\n  return (\n    <>\n      <button\n        disabled={isLoading}\n        className=\"icon delete\"\n        onClick={() => setIsDeleting(true)}>\n        <img src={trashIcon} alt=\"Delete Item\" />\n      </button>\n\n      <BinaryModal\n        show={isDeleting}\n        onClose={() => setIsDeleting(false)}\n        onConfirm={handleDeleteItem}\n        disabled={isLoading}\n        strings={{ text: 'Do you want to delete this item from the data vault?', confirm: 'Yes', deny: 'No' }}\n        className=\"delete-modal\"\n        error={isError}\n      />\n    </>\n  )\n}\n\nexport default DeleteDvContentButton\n","import React from 'react'\nimport { BaseButton } from '../../../components/Buttons'\n\ninterface DecryptKeyInterface {\n  handleGetContent: () => void\n  disabled: boolean\n}\n\nconst DecryptKey: React.FC<DecryptKeyInterface> = ({\n  handleGetContent, disabled\n}) => {\n  return (\n    <div className=\"decrypt\">\n      <BaseButton\n        className=\"gray small\"\n        onClick={handleGetContent}\n        disabled={disabled}>\n        Download\n      </BaseButton>\n    </div>\n  )\n}\n\nexport default DecryptKey\n","import React from 'react'\n\ninterface DownloadErrorMessageInterface {\n keyError: string\n}\n\nconst DownloadErrorMessage: React.FC<DownloadErrorMessageInterface> = ({ keyError }) => (\n  <p className=\"alert error\">This content is encrypted, and your wallet is unable to decrypt the key <em>{keyError}</em>.</p>\n)\n\nexport default DownloadErrorMessage\n","import React, { useState } from 'react'\nimport Panel from '../../../components/Panel/Panel'\nimport declarativeIcon from '../../../assets/images/icons/declarative-details.svg'\nimport pencilIcon from '../../../assets/images/icons/pencil.svg'\nimport { DataVaultContent, DataVaultKey } from '../../state/reducers/datavault'\nimport EditValueModal from '../../../components/Modal/EditValueModal'\nimport DeleteDvContentButton from '../components/DeleteDvContentButton'\nimport DecryptKey from '../components/DecryptKey'\nimport DownloadErrorMessage from '../components/DownloadErrorMessage'\n\ninterface DeclarativeDetailsDisplayInterface {\n  deleteValue: (key: string, id: string) => Promise<any>\n  swapValue: (key: string, content: string, id: string) => Promise<any>\n  getKeyContent: (key: string) => Promise<any>\n  details: DataVaultKey\n}\n\nconst DeclarativeDetailsDisplay: React.FC<DeclarativeDetailsDisplayInterface> = ({ details, deleteValue, swapValue, getKeyContent }) => {\n  interface EditItemI { key: string; item: DataVaultContent }\n\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [isError, setIsError] = useState<null | string>(null)\n  const [isDownloadError, setIsDownloadError] = useState<null | string>(null)\n  const [isEditing, setIsEditing] = useState<null | EditItemI>(null)\n  const [isGettingContent, setIsGettingContent] = useState<string[]>([])\n\n  const handleEditItem = (newValue: string, existingItem: EditItemI) => {\n    if (newValue === existingItem.item.content) {\n      return setIsError('New value is the same as the old.')\n    }\n\n    setIsLoading(true)\n    setIsError(null)\n\n    swapValue(existingItem.key, newValue, existingItem.item.id)\n      .then(() => {\n        setIsLoading(false)\n        setIsEditing(null)\n      })\n      .catch((err: Error) => setIsError(err.message))\n      .finally(() => setIsLoading(false))\n  }\n\n  const handleGetContent = (key: string) => {\n    setIsDownloadError(null)\n    setIsGettingContent([...isGettingContent, key])\n    getKeyContent(key)\n      .catch(() => setIsDownloadError(key))\n      .finally(() => {\n        setIsGettingContent(isGettingContent.filter((k: string) => k !== key))\n      })\n  }\n\n  const showDownloadMessage = () => {\n    const keys = Object.keys(details)\n    if (keys.length === 0) {\n      return false\n    }\n\n    let hasEmpty = false\n    for (var key in details) {\n      if (details[key].length === 0) {\n        hasEmpty = true\n      }\n    }\n    return hasEmpty\n  }\n\n  return (\n    <Panel title={<><img src={declarativeIcon} /> Declarative Details</>} className=\"display\">\n      {showDownloadMessage() && <p className=\"intro\">Click on the download button to decrypt the content. Your wallet will request to decrypt each piece of content.</p>}\n      {isDownloadError && <DownloadErrorMessage keyError={isDownloadError} />}\n      <table>\n        <thead>\n          <tr>\n            <th className=\"type\">Type</th>\n            <th className=\"content\">Content</th>\n          </tr>\n        </thead>\n        <tbody>\n          { Object.keys(details).map((key: string) => {\n            return (\n              <tr key={key}>\n                <td>{key.replace('DD_', '')}</td>\n                <td>\n                  {details[key].length === 0 && (\n                    <DecryptKey handleGetContent={() => handleGetContent(key)} disabled={isGettingContent.includes(key)} />\n                  )}\n                  {details[key].map((item: DataVaultContent) => (\n                    <div className=\"content-row\" key={item.id}>\n                      <div className=\"content break-all\">\n                        <p>{item.content}</p>\n                      </div>\n                      <div className=\"options\">\n                        <button\n                          disabled={isLoading}\n                          className=\"icon edit\"\n                          onClick={() => { setIsError(null); setIsEditing({ key, item }) }}\n                        >\n                          <img src={pencilIcon} alt=\"Edit item\" />\n                        </button>\n                        <DeleteDvContentButton itemKey={key} item={item} deleteValue={deleteValue} />\n                      </div>\n                    </div>\n                  ))}\n                </td>\n              </tr>\n            )\n          }\n          )}\n        </tbody>\n      </table>\n\n      <EditValueModal\n        show={isEditing !== null}\n        onClose={() => setIsEditing(null)}\n        onConfirm={(value: string) => isEditing && handleEditItem(value, isEditing)}\n        disabled={isLoading}\n        strings={{ title: 'Edit value in the DataVault', label: 'New value', submit: 'Update' }}\n        className=\"edit-modal\"\n        initValue={isEditing ? isEditing.item.content : ''}\n        inputType=\"textarea\"\n        error={isError}\n      />\n    </Panel>\n  )\n}\n\nexport default DeclarativeDetailsDisplay\n","export default __webpack_public_path__ + \"static/media/upload.f7f9ea67.svg\";","import React, { useState } from 'react'\nimport { BaseButton } from '../../../components/Buttons'\nimport Panel from '../../../components/Panel/Panel'\nimport uploadIcon from '../../../assets/images/icons/upload.svg'\nimport LoadingComponent from '../../../components/Loading/LoadingComponent'\nimport { PROVIDERS } from '../../../ethrpc'\n\ninterface AddDeclarativeDetailsInterface {\n  addDeclarativeDetail: (key: string, content: string) => Promise<any>\n  providerName?: PROVIDERS\n}\n\nconst AddDeclarativeDetails: React.FC<AddDeclarativeDetailsInterface> = ({ addDeclarativeDetail, providerName }) => {\n  const [type, setType] = useState('')\n  const [content, setContent] = useState('')\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [isError, setIsError] = useState<string | null>(null)\n\n  const handleClick = () => {\n    setIsLoading(true)\n    setIsError(null)\n\n    if (type === '' || content === '') {\n      setIsLoading(false)\n      return setIsError('Type and Content cannot be empty.')\n    }\n\n    addDeclarativeDetail(`DD_${type.toUpperCase()}`, content)\n      .then(() => {\n        setIsLoading(false)\n        setContent('')\n        setType('')\n      })\n      .catch((err: Error) => {\n        setIsLoading(false)\n        setIsError(err.message)\n      })\n  }\n\n  const title = <><img src={uploadIcon} /> Add New Declarative Details</>\n\n  return (\n    <Panel title={title} className=\"add-declarative\">\n      {providerName !== PROVIDERS.METAMASK && (\n        <div className=\"alert warning\">\n          <h2>Warning!</h2>\n          <p>Your wallet does not support encrypted content in your data vault. You can still add content, but it will be saved as plaintext.</p>\n        </div>\n      )}\n      <div className=\"container\">\n        <div className=\"column\">\n          <p className=\"title\">Type</p>\n          <input type=\"text\"\n            className=\"line type\"\n            value={type}\n            onChange={(evt) => setType(evt.target.value)}\n            disabled={isLoading}\n            placeholder=\"Content type\" />\n        </div>\n        <div className=\"columnDouble\">\n          <p className=\"title\">Content</p>\n          <textarea\n            className=\"line content\"\n            value={content}\n            onChange={(evt) => setContent(evt.target.value)}\n            disabled={isLoading}\n            placeholder=\"Content\"\n          />\n        </div>\n        <div className=\"column submitColumn\">\n          <BaseButton className=\"submit turquoise\" onClick={handleClick} disabled={isLoading}>Add Data</BaseButton>\n        </div>\n      </div>\n      {isError && (\n        <div className=\"alert error\">\n          <p>{isError}</p>\n        </div>\n      )}\n\n      {isLoading && <LoadingComponent />}\n    </Panel>\n  )\n}\n\nexport default AddDeclarativeDetails\n","import React, { useState } from 'react'\nimport DataVaultWebClient from '@rsksmart/ipfs-cpinner-client'\n\nexport interface Web3ProviderContextInterface {\n  provider: any | null,\n  setProvider?: (value: any) => void\n  dvClient: DataVaultWebClient | null,\n  setDvClient?: (client: DataVaultWebClient) => void\n  reset: () => void\n}\n\nexport const Web3ProviderContext = React.createContext<Web3ProviderContextInterface>({\n  provider: null,\n  dvClient: null,\n  reset: () => {}\n})\n\ninterface Web3ProviderElementInterface {\n  children: React.ReactNode,\n}\n\nexport const Web3ProviderElement: React.FC<Web3ProviderElementInterface> = ({ children }) => {\n  const [provider, setProvider] = useState<any | null>(null)\n  const [dvClient, setDvClient] = useState<DataVaultWebClient | null>(null)\n\n  const initialContext: Web3ProviderContextInterface = {\n    provider: provider,\n    setProvider: (provider: any) => setProvider(provider),\n    dvClient: dvClient,\n    setDvClient: (client: DataVaultWebClient | null) => setDvClient(client),\n    reset: () => {\n      setProvider(null)\n      setDvClient(null)\n    }\n  }\n\n  return (\n    <Web3ProviderContext.Provider value={initialContext}>\n      {children}\n    </Web3ProviderContext.Provider>\n  )\n}\n","import React, { ReactNode, useEffect, useState } from 'react'\nimport jwtDecode from 'jwt-decode'\n\ninterface CredentialViewInterface {\n  jwt: string\n  options?: ReactNode\n}\n\nconst CredentialView: React.FC<CredentialViewInterface> = ({ jwt, options }) => {\n  const [showRaw, setShowRaw] = useState<boolean>(false)\n  const [error, setError] = useState<null | string>(null)\n  const [prettyJson, setPrettyJson] = useState<string>('')\n\n  useEffect(() => {\n    try {\n      setPrettyJson(JSON.stringify(jwtDecode(jwt), null, 2))\n    } catch (err) {\n      setError(err.message)\n      setShowRaw(true)\n    }\n  }, [jwt])\n\n  return (\n    <div className=\"content-row\">\n      <div className=\"content\">\n        {prettyJson && (\n          <div className=\"break-all\">\n            <textarea\n              defaultValue={prettyJson}\n              disabled={true}></textarea>\n          </div>\n        )}\n\n        {error && (\n          <div className=\"alert error\">\n            <strong>Could not decode credential!</strong><br />\n            <em>The raw data is displayed below.</em>\n          </div>\n        )}\n\n        {showRaw && <div className=\"raw break-all\">{jwt}</div>}\n      </div>\n      {!error && (\n        <div className=\"options\">\n          <button className=\"icon raw\" onClick={() => setShowRaw(!showRaw)}>{showRaw ? 'Hide' : 'View'} Raw</button>\n          {options}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default CredentialView\n","export default __webpack_public_path__ + \"static/media/credential.436c18a7.svg\";","import React, { useState } from 'react'\nimport Modal from '../../../components/Modal/Modal'\nimport LoadingComponent from '../../../components/Loading/LoadingComponent'\nimport CopyButton from '../../../components/CopyButton/CopyButton'\nimport { BaseButton } from '../../../components/Buttons'\n\ninterface PresentCredentialInterface {\n  jwt: string\n  createPresentation: (jwt: string) => Promise<string>\n}\n\nconst PresentCredential: React.FC<PresentCredentialInterface> = ({ jwt, createPresentation }) => {\n  interface stateInterface {\n    status: 'NONE' | 'LOADING' | 'DONE' | 'ERROR'\n    message: string\n  }\n  const initialState: stateInterface = { status: 'NONE', message: '' }\n  const [state, setState] = useState<stateInterface>(initialState)\n\n  const handleCreate = () => {\n    setState({ status: 'LOADING', message: '' })\n    createPresentation(jwt)\n      .then((message: string) => setState({ status: 'DONE', message }))\n      .catch((error: Error) => setState({ status: 'ERROR', message: error.message }))\n  }\n\n  return (\n    <>\n      <button className=\"icon\" onClick={handleCreate}>Present</button>\n      <Modal show={state.status !== 'NONE'} onClose={() => setState(initialState)} title=\"Present Credential\">\n        {state.status === 'LOADING' && <LoadingComponent />}\n        {state.status === 'DONE' && (\n          <div>\n            <h2>Raw JWT</h2>\n            <textarea defaultValue={state.message} className=\"jwt\" />\n            <CopyButton value={state.message} />\n          </div>\n        )}\n        {state.status === 'ERROR' && (\n          <>\n            <p className=\"alert error\">{state.message}</p>\n            <p><BaseButton onClick={handleCreate}>Try Again</BaseButton></p>\n          </>\n        )}\n      </Modal>\n    </>\n  )\n}\n\nexport default PresentCredential\n","import React, { useState } from 'react'\nimport CredentialView from '../../../components/CredentialView/CredentialView'\nimport Panel from '../../../components/Panel/Panel'\nimport { DataVaultContent, DataVaultKey } from '../../state/reducers/datavault'\nimport CredentialIcon from '../../../assets/images/icons/credential.svg'\nimport DecryptKey from '../components/DecryptKey'\nimport DeleteDvContentButton from '../components/DeleteDvContentButton'\nimport PresentCredential from '../components/PresentCredential'\nimport DownloadErrorMessage from '../components/DownloadErrorMessage'\n\ninterface CredentialDisplayInterface {\n  credentials: DataVaultKey\n  getKeyContent: (key: string) => Promise<any>\n  deleteValue: (key: string, id: string) => Promise<any>\n  createPresentation: (jwt: string) => Promise<any>\n}\n\nconst CredentialDisplay: React.FC<CredentialDisplayInterface> = ({ credentials, getKeyContent, deleteValue, createPresentation }) => {\n  const [isGettingContent, setIsGettingContent] = useState<string[]>([])\n  const [isDownloadError, setIsDownloadError] = useState<null | string>(null)\n  const handleGetContent = (key: string) => {\n    setIsGettingContent([...isGettingContent, key])\n    setIsDownloadError(null)\n    getKeyContent(key)\n      .catch(() => setIsDownloadError(key))\n      .finally(() => setIsGettingContent(isGettingContent.filter((k: string) => k !== key)))\n  }\n\n  return (\n    <Panel title={<><img src={CredentialIcon} /> Credentials</>} className=\"display credentials\">\n      {isDownloadError && <DownloadErrorMessage keyError={isDownloadError} />}\n      <table>\n        <thead>\n          <tr>\n            <th className=\"type\">Type</th>\n            <th className=\"content\">Content</th>\n          </tr>\n        </thead>\n        <tbody>\n          { Object.keys(credentials).map((key: string) => {\n            return (\n              <tr key={key}>\n                <td>{key}</td>\n                <td>\n                  <ul>\n                    {credentials[key].map((item: DataVaultContent) =>\n                      <li key={item.id}>\n                        <CredentialView\n                          jwt={item.content}\n                          options={<>\n                            <div><PresentCredential jwt={item.content} createPresentation={createPresentation} /></div>\n                            <div><DeleteDvContentButton item={item} itemKey={key} deleteValue={deleteValue} /></div>\n                          </>}\n                        />\n                      </li>)}\n                  </ul>\n                  {credentials[key].length === 0 && (\n                    <DecryptKey handleGetContent={() => handleGetContent(key)} disabled={isGettingContent.includes(key)} />\n                  )}\n                </td>\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n    </Panel>\n  )\n}\n\nexport default CredentialDisplay\n","export default __webpack_public_path__ + \"static/media/download.b2edd61f.svg\";","import React, { useState } from 'react'\nimport Panel from '../../../components/Panel/Panel'\nimport downloadIcon from '../../../assets/images/icons/download.svg'\nimport { BaseButton } from '../../../components/Buttons'\nimport LoadingComponent from '../../../components/Loading/LoadingComponent'\n\ninterface DownloadBackupInterface {\n  handleDownload: () => Promise<any>\n}\n\nconst DownloadBackup: React.FC<DownloadBackupInterface> = ({\n  handleDownload\n}) => {\n  const initStatus = { isLoading: false, isError: null }\n  const [status, setStatus] = useState<{ isLoading: boolean; isError: string | null }>({\n    isLoading: false,\n    isError: null\n  })\n\n  const download = () => {\n    setStatus({ ...initStatus, isLoading: true })\n    handleDownload()\n      .then(() => setStatus(initStatus))\n      .catch((error: Error) => setStatus({ ...initStatus, isError: error.message }))\n  }\n\n  return (\n    <Panel title={<><img src={downloadIcon} /> Download Backup</>}>\n      <p>Download a backup file of all the keys and IPFS hashes that are stored in the DataVault.</p>\n      <p><BaseButton onClick={download} disabled={status.isLoading} className=\"small\">\n        Download Backup\n      </BaseButton></p>\n      {status.isLoading && <LoadingComponent />}\n      {status.isError && <div className=\"alert error\">{status.isError}</div>}\n    </Panel>\n  )\n}\n\nexport default DownloadBackup\n","import React, { useContext } from 'react'\nimport DataVaultWebClient from '@rsksmart/ipfs-cpinner-client'\nimport DeclarativeDetailsDisplay from './panels/DeclarativeDetailsDisplay'\nimport AddDeclarativeDetails from './panels/AddDeclarativeDetails'\nimport { DataVaultKey } from '../state/reducers/datavault'\nimport { Web3ProviderContext } from '../../providerContext'\nimport CredentialDisplay from './panels/CredentialDisplay'\nimport DownloadBackup from './panels/DownloadBackup'\nimport { createPresentation } from '../../features/credentials'\nimport { getProviderName } from '../../ethrpc'\n\ninterface DataVaultComponentProps {\n  declarativeDetails: DataVaultKey\n  credentials: DataVaultKey\n  addDeclarativeDetail: (client: DataVaultWebClient, key: string, content: string) => any\n  deleteValue: (client: DataVaultWebClient, key: string, id: string) => any\n  swapValue: (client: DataVaultWebClient, key: string, content: string, id: string) => any\n  downloadBackup: (client: DataVaultWebClient) => any\n  getKeyContent: (client: DataVaultWebClient, key: string) => any\n}\n\nconst DataVaultComponent: React.FC<DataVaultComponentProps> = ({\n  addDeclarativeDetail, declarativeDetails, credentials, deleteValue, swapValue, downloadBackup, getKeyContent\n}) => {\n  const context = useContext(Web3ProviderContext)\n\n  const handleAdd = (key: string, content: string) =>\n    context.dvClient && addDeclarativeDetail(context.dvClient, key, content)\n  const handleDelete = (key: string, id: string) =>\n    context.dvClient && deleteValue(context.dvClient, key, id)\n  const handleSwap = (key: string, content: string, id: string) =>\n    context.dvClient && swapValue(context.dvClient, key, content, id)\n  const handleDownload = () => context.dvClient && downloadBackup(context.dvClient)\n  const handleGetKeyContent = (key: string) =>\n    context.dvClient && getKeyContent(context.dvClient, key)\n\n  return (\n    <div className=\"content data-vault\">\n      <div className=\"container\">\n        <div className=\"column\">\n          <AddDeclarativeDetails\n            addDeclarativeDetail={handleAdd}\n            providerName={getProviderName(context.provider)}\n          />\n        </div>\n      </div>\n      <div className=\"container\">\n        <div className=\"column\">\n          <DeclarativeDetailsDisplay\n            details={declarativeDetails}\n            deleteValue={handleDelete}\n            swapValue={handleSwap}\n            getKeyContent={handleGetKeyContent}\n          />\n        </div>\n      </div>\n      <div className=\"container\">\n        <div className=\"column\">\n          <CredentialDisplay\n            credentials={credentials}\n            deleteValue={handleDelete}\n            getKeyContent={handleGetKeyContent}\n            createPresentation={(jwt: string) => createPresentation(context.provider, jwt)}\n          />\n        </div>\n      </div>\n      <div className=\"container\">\n        <div className=\"column\">\n          <DownloadBackup handleDownload={handleDownload} />\n        </div>\n        <div className=\"column\"></div>\n      </div>\n    </div>\n  )\n}\n\nexport default DataVaultComponent\n","import { Issuer, JwtPresentationPayload, createVerifiablePresentationJwt } from 'did-jwt-vc'\nimport { getAccountAndNetwork } from '../ethrpc'\nimport { createDidFormat } from '../formatters'\n\nexport const createPresentation = (provider: any, jwt: string) => {\n  return getAccountAndNetwork(provider).then(([address, chainId]) => {\n    const did = createDidFormat(address, chainId)\n    const issuer: Issuer = {\n      did,\n      signer: (data: string) => provider.request({ method: 'personal_sign', params: [data, address] })\n    }\n\n    const vpPayload: JwtPresentationPayload = {\n      vp: {\n        '@context': ['https://www.w3.org/2018/credentials/v1'],\n        type: ['VerifiablePresentation'],\n        verifiableCredential: [jwt],\n        nbf: Math.floor(new Date().getTime() / 1000),\n        exp: Math.floor(new Date().getTime() / 1000) + 3600\n      }\n    }\n    return createVerifiablePresentationJwt(vpPayload, issuer)\n  })\n}\n","import { ThunkDispatch } from 'redux-thunk'\nimport { connect } from 'react-redux'\nimport DataVaultWebClient from '@rsksmart/ipfs-cpinner-client'\nimport { stateInterface } from '../state/configureStore'\nimport DataVaultComponent from './DataVaultComponent'\nimport { AnyAction } from 'redux'\nimport { createDataVaultContent, deleteDataVaultContent, swapDataVaultContent, downloadBackup, getDataVaultContent } from '../state/operations/datavault'\n\nconst mapStateToProps = (state: stateInterface) => ({\n  declarativeDetails: state.datavault.declarativeDetails,\n  credentials: state.datavault.credentials\n})\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<stateInterface, {}, AnyAction>) => ({\n  addDeclarativeDetail: (client: DataVaultWebClient, key: string, content: string) =>\n    dispatch(createDataVaultContent(client, key, content)),\n  deleteValue: (client: DataVaultWebClient, key: string, id: string) =>\n    dispatch(deleteDataVaultContent(client, key, id)),\n  swapValue: (client: DataVaultWebClient, key: string, content: string, id: string) =>\n    dispatch(swapDataVaultContent(client, key, content, id)),\n  downloadBackup: (client: DataVaultWebClient) => downloadBackup(client),\n  getKeyContent: (client: DataVaultWebClient, key: string) =>\n    dispatch(getDataVaultContent(client, key))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DataVaultComponent)\n","export default __webpack_public_path__ + \"static/media/delegate.618299c9.svg\";","import React, { useState } from 'react'\nimport { PublicKey } from 'did-resolver'\nimport { isValidAddress, isValidChecksumAddress } from 'rskjs-util'\nimport { createDidFormat, truncateAddressDid } from '../../../formatters'\nimport ToolTip from '../../../components/Tooltip/Tooltip'\nimport Panel from '../../../components/Panel/Panel'\nimport EditValueModal from '../../../components/Modal/EditValueModal'\nimport DelegateIcon from '../../../assets/images/icons/delegate.svg'\n\ninterface DelegateComponentInterface {\n  delegates?: PublicKey[] | null\n  chainId?: number | null\n  addDelegate: (delegate: string) => any\n  isOwner: boolean\n}\n\nconst DelegateComponent: React.FC<DelegateComponentInterface> = ({ delegates, chainId, addDelegate, isOwner }) => {\n  const [isAdding, setIsAdding] = useState<boolean>(false)\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [isError, setIsError] = useState<null | string>(null)\n\n  const resetState = () => {\n    setIsError(null)\n    setIsLoading(false)\n  }\n\n  const handleAddDelegate = (newDelegate: string) => {\n    resetState()\n\n    if (!isValidAddress(newDelegate)) {\n      resetState()\n      return setIsError('Invalid Address')\n    }\n\n    if (newDelegate !== newDelegate.toLowerCase() && !isValidChecksumAddress(newDelegate, chainId)) {\n      resetState()\n      return setIsError('Checksum is incorrect.')\n    }\n\n    if (delegates?.filter(item => item.ethereumAddress?.indexOf(newDelegate.toLowerCase()) !== -1).length !== 0) {\n      resetState()\n      return setIsError('This address is already a delegate.')\n    }\n\n    setIsLoading(true)\n    addDelegate(newDelegate)\n      .then(() => {\n        setIsAdding(false)\n        resetState()\n      })\n      .catch((err: Error) => {\n        resetState()\n        setIsError(err.message)\n      })\n  }\n\n  const handleClose = () => {\n    if (!isLoading) {\n      setIsAdding(false)\n      resetState()\n    }\n  }\n\n  return (\n    <Panel\n      title={<><img src={DelegateIcon} /> Delegate Identity</>}\n      headerRight={isOwner && <button onClick={() => setIsAdding(true)}>Add Delegate</button>}\n    >\n      <h2>Delegates</h2>\n      <ul className=\"value\">\n        {delegates?.length === 0 && <li><em>No delegates for this persona.</em></li>}\n        {delegates?.map((delegate: PublicKey) => {\n          if (!delegate.ethereumAddress || !chainId) return <></>\n          const did = createDidFormat(delegate.ethereumAddress, chainId)\n          return (\n            <li key={did}>\n              <ToolTip hoverContent={did}>{truncateAddressDid(did)}</ToolTip>\n            </li>\n          )\n        })}\n      </ul>\n\n      <EditValueModal\n        show={isAdding}\n        onClose={handleClose}\n        className=\"delegate-identity\"\n        onConfirm={handleAddDelegate}\n        disabled={isLoading}\n        error={isError}\n        initValue=''\n        isLoading={isLoading}\n        strings={{\n          title: 'Delegate Identity',\n          intro: 'Controllers can manage the identity but they are not the owners. Only the owners can transfer identities.',\n          label: 'Delegate to',\n          submit: 'Add delegate',\n          placeholder: 'Address'\n        }}\n      />\n    </Panel>\n  )\n}\n\nexport default DelegateComponent\n","import React, { useState } from 'react'\nimport { createDidFormat, truncateAddressDid } from '../../../formatters'\nimport { isValidAddress, isValidChecksumAddress } from 'rskjs-util'\nimport ToolTip from '../../../components/Tooltip/Tooltip'\nimport Panel from '../../../components/Panel/Panel'\nimport EditValueModal from '../../../components/Modal/EditValueModal'\nimport PersonaIcon from '../../../assets/images/icons/persona.svg'\n\ninterface OwnerComponentInterface {\n  owner?: string | null\n  isOwner: boolean\n  chainId?: number | null\n  changeOwner: (newOwner: string) => any\n}\n\nconst OwnerComponent: React.FC<OwnerComponentInterface> = ({ owner, isOwner, chainId, changeOwner }) => {\n  const [isEditing, setIsEditing] = useState<boolean>(false)\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [isError, setIsError] = useState<null | string>(null)\n\n  const resetState = () => {\n    setIsError(null)\n    setIsLoading(false)\n  }\n\n  const handleSetOwner = (newOwner: string) => {\n    resetState()\n\n    if (!isValidAddress(newOwner)) {\n      resetState()\n      return setIsError('Invalid Address')\n    }\n\n    if (newOwner !== newOwner.toLowerCase() && !isValidChecksumAddress(newOwner, chainId)) {\n      resetState()\n      return setIsError('Checksum is incorrect.')\n    }\n    setIsLoading(true)\n    changeOwner(newOwner)\n      .then(() => {\n        setIsEditing(false)\n        resetState()\n      })\n      .catch((err: Error) => {\n        resetState()\n        setIsError(err.message)\n      })\n  }\n\n  const handleClose = () => {\n    if (!isLoading) {\n      setIsEditing(false)\n      resetState()\n    }\n  }\n\n  const ownerDid = owner && chainId && createDidFormat(owner, chainId)\n\n  return (\n    <Panel\n      title={<><img src={PersonaIcon} /> Persona owner</>}\n      headerRight={isOwner && <button onClick={() => setIsEditing(true)}>Transfer</button>}\n    >\n      <h2>Owner</h2>\n      <p className=\"value\">\n        {ownerDid && <ToolTip hoverContent={ownerDid}>{truncateAddressDid(ownerDid)}</ToolTip>}\n      </p>\n\n      <EditValueModal\n        show={isEditing}\n        className=\"change-owner\"\n        onConfirm={handleSetOwner}\n        onClose={handleClose}\n        disabled={isLoading}\n        isLoading={isLoading}\n        error={isError}\n        initValue={''}\n        strings={{\n          title: 'Transfer Persona Owner',\n          intro: 'Be aware that once you transfer the identity, you will lose ownership and can no longer manage the identity.',\n          label: 'Transfer to',\n          placeholder: 'address',\n          submit: 'Transfer'\n        }}\n      />\n    </Panel>\n  )\n}\n\nexport default OwnerComponent\n","export default __webpack_public_path__ + \"static/media/key.6bad30f3.svg\";","import React, { useState } from 'react'\nimport { PublicKey } from 'did-resolver'\nimport Panel from '../../../components/Panel/Panel'\nimport Modal from '../../../components/Modal/Modal'\nimport { BaseButton } from '../../../components/Buttons'\nimport LoadingComponent from '../../../components/Loading/LoadingComponent'\nimport KeyIcon from '../../../assets/images/icons/key.svg'\n\ninterface PublicAttributesInterface {\n  addKey: (type: string, value: string, validity: number) => Promise<any>\n  publicKeys?: PublicKey[]\n  isOwner: boolean\n}\n\nconst PublicAttributes: React.FC<PublicAttributesInterface> = ({ publicKeys, addKey, isOwner }) => {\n  const [isAdding, setIsAdding] = useState<boolean>(false)\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [isError, setIsError] = useState<null | string>(null)\n\n  const defaults = ({\n    algorithm: 'secp256k1',\n    purpose: 'veriKey',\n    encoding: 'hex',\n    validity: '86400',\n    value: ''\n  })\n\n  const [values, setValues] = useState<{algorithm: string, purpose: string, encoding: string, validity: string, value: string}>(defaults)\n\n  const handleAddKey = () => {\n    if (values.value === '') {\n      return setIsError('Value can not be empty')\n    }\n\n    setIsLoading(true)\n    setIsError(null)\n    addKey(`did/pub/${values.algorithm}/${values.purpose}/${values.encoding}`, values.value, parseInt(values.validity))\n      .then(() => {\n        setIsLoading(false)\n        setIsAdding(false)\n        setValues(defaults)\n      })\n      .catch((err: Error) => {\n        setIsLoading(false)\n        setIsError(err.message)\n      })\n  }\n\n  const sharedProps = (id: string) => ({\n    id,\n    className: 'line',\n    onChange: (evt: { target: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement }) =>\n      setValues({ ...values, [evt.target.id]: evt.target.value })\n  })\n\n  return (\n    <>\n      <Panel\n        title={<><img src={KeyIcon} /> Public Keys</>}\n        headerRight={isOwner && <button onClick={() => setIsAdding(true)}>Add Public Key</button>}\n      >\n        <h2>Public Keys</h2>\n        <ul>\n          {(!publicKeys || publicKeys.length === 0) && <li><em>No public keys</em></li>}\n          {publicKeys?.map((pk: PublicKey) => (\n            <li key={pk.id}><strong>{pk.type}</strong><br /> {pk.publicKeyBase64 || pk.publicKeyHex}</li>\n          ))}\n        </ul>\n      </Panel>\n      <Modal title=\"Add Public Key\" show={isAdding} onClose={() => setIsAdding(false)}>\n        <fieldset>\n          <p>\n            <label>Key Algorithm</label>\n            <select {...sharedProps('algorithm')} value={values.algorithm}>\n              <option value=\"secp256k1\">secp256k1</option>\n              <option value=\"rsa\">RSA</option>\n              <option value=\"Ed25519\">Ed25519</option>\n            </select>\n          </p>\n          <p>\n            <label htmlFor=\"purpose\">Key Purpose</label>\n            <select {...sharedProps('purpose')} value={values.purpose}>\n              <option value=\"veriKey\">veriKey</option>\n              <option value=\"sigAuth\">sigAuth</option>\n            </select>\n          </p>\n          <p>\n            <label htmlFor=\"encoding\">Encoding</label>\n            <select {...sharedProps('encoding')} value={values.encoding}>\n              <option value=\"hex\">hex</option>\n              <option value=\"base64\">base64</option>\n            </select>\n          </p>\n          <p>\n            <label htmlFor=\"validity\">Validity <span>(in seconds)</span></label>\n            <input {...sharedProps('validity')} type=\"text\" value={values.validity} />\n          </p>\n          <p>\n            <label>Key</label>\n            <textarea {...sharedProps('value')}></textarea>\n          </p>\n\n          <BaseButton className=\"submit\" disabled={isLoading} onClick={handleAddKey}>Add Public Key</BaseButton>\n          {isError && <div className=\"alert error\">{isError}</div>}\n          {isLoading && <LoadingComponent />}\n        </fieldset>\n      </Modal>\n    </>\n  )\n}\n\nexport default PublicAttributes\n","export default __webpack_public_path__ + \"static/media/computer.de8f038b.svg\";","import React, { useState } from 'react'\nimport { ServiceEndpoint } from 'did-resolver'\nimport Panel from '../../../components/Panel/Panel'\nimport Modal from '../../../components/Modal/Modal'\nimport { BaseButton } from '../../../components/Buttons'\nimport LoadingComponent from '../../../components/Loading/LoadingComponent'\nimport computerIcon from '../../../assets/images/icons/computer.svg'\n\ninterface ServiceEndPointsInterface {\n  endpoints?: ServiceEndpoint[],\n  addEndpoint: (name: string, url: string, validity: number) => Promise<any>\n  isOwner: boolean\n}\n\nconst ServiceEndPoints: React.FC<ServiceEndPointsInterface> = ({ endpoints, addEndpoint, isOwner }) => {\n  const [isAdding, setIsAdding] = useState<boolean>(false)\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [isError, setIsError] = useState<string | null>(null)\n\n  const defaults = { name: '', url: '', validity: '86400' }\n  const [values, setValues] = useState<{ name: string, url: string, validity: string}>(defaults)\n\n  const sharedProps = (id: string) => ({\n    type: 'text',\n    className: 'line',\n    id,\n    onChange: (evt: { target: HTMLInputElement }) =>\n      setValues({ ...values, [evt.target.id]: evt.target.value }),\n    disabled: isLoading,\n    placeholder: id\n  })\n\n  const handleAddEndpoint = () => {\n    setIsLoading(true)\n    setIsError(null)\n\n    if (values.name === '' || values.url === '') {\n      setIsLoading(false)\n      return setIsError('Name and URL are required fields.')\n    }\n\n    if (values.name.indexOf(' ') !== -1) {\n      setIsLoading(false)\n      return setIsError('Name should not contain spaces.')\n    }\n\n    addEndpoint(`did/svc/${values.name}`, values.url, parseInt(values.validity))\n      .then(() => {\n        setIsLoading(false)\n        setIsAdding(false)\n        setValues(defaults)\n      })\n      .catch((err: Error) => {\n        setIsLoading(false)\n        setIsError(err.message)\n      })\n  }\n\n  return (\n    <>\n      <Panel\n        title={<><img src={computerIcon} /> Service Endpoints</>}\n        headerRight={isOwner && <button onClick={() => setIsAdding(true)}>Add Endpoint</button>}\n      >\n        <h2>Active Endpoints</h2>\n        <ul>\n          {(!endpoints || endpoints?.length === 0) && <li><em>No service endpoints setup.</em></li>}\n          {endpoints?.map((endpoint: ServiceEndpoint) => (\n            <li className=\"endpoint\" key={endpoint.id || endpoint.type}>\n              <strong>{endpoint.type}</strong> - {endpoint.serviceEndpoint}\n            </li>\n          ))}\n        </ul>\n      </Panel>\n\n      <Modal show={isAdding} title=\"Add Service Endpoint\" onClose={() => setIsAdding(false)}>\n        <fieldset>\n          <p>\n            <label htmlFor=\"name\">Name</label>\n            <input {...sharedProps('name')} value={values.name} />\n          </p>\n          <p>\n            <label htmlFor=\"url\">URL</label>\n            <input {...sharedProps('url')} value={values.url} />\n          </p>\n          <p>\n            <label htmlFor=\"validity\">Validity <span>(in seconds)</span></label>\n            <input {...sharedProps('validity')} value={values.validity} />\n          </p>\n        </fieldset>\n        <BaseButton className=\"submit\" disabled={isLoading} onClick={handleAddEndpoint}>Add Endpoint</BaseButton>\n        {isError && <div className=\"alert error\">{isError}</div>}\n        {isLoading && <LoadingComponent />}\n      </Modal>\n    </>\n  )\n}\n\nexport default ServiceEndPoints\n","import { PublicKey, ServiceEndpoint } from 'did-resolver'\nimport React, { useContext } from 'react'\nimport DelegateComponent from './components/DelegateComponent'\nimport OwnerComponent from './components/OwnerComponent'\nimport { Web3ProviderContext } from '../../providerContext'\nimport PublicKeys from './components/PublicKeys'\nimport ServiceEndPoints from './components/ServiceEndPoints'\n\ninterface IdentityComponentInterface {\n  owner?: string | null\n  address: string\n  chainId?: number | null\n  delegates?: PublicKey[]\n  service?: ServiceEndpoint[]\n  publicKeys?: PublicKey[]\n  changeOwner: (provider: any, newOwner: string) => any\n  addDelegate: (provider: any, delegateAddr: string) => any\n  addAttribute: (provider: any, type: string, value: string, validity: number) => any\n}\n\nconst IdentityComponent: React.FC<IdentityComponentInterface> = ({\n  owner, address, chainId, delegates, service, publicKeys, changeOwner, addDelegate, addAttribute\n}) => {\n  const isOwner = address?.toLowerCase() === owner?.toLowerCase()\n  const context = useContext(Web3ProviderContext)\n\n  const handleChangeOwner = (newOwner: string) => changeOwner(context?.provider, newOwner)\n  const handleAddDelegate = (delegate: string) => addDelegate(context?.provider, delegate)\n  const handleAddAttribute = (type: string, value: string, validity: number) =>\n    addAttribute(context?.provider, type, value, validity)\n\n  return (\n    <div className=\"content identity\">\n      <div className=\"container\">\n        <div className=\"column\">\n          <OwnerComponent owner={owner} chainId={chainId} isOwner={isOwner} changeOwner={handleChangeOwner} />\n        </div>\n        <div className=\"column\">\n          <DelegateComponent delegates={delegates} chainId={chainId} addDelegate={handleAddDelegate} isOwner={isOwner} />\n        </div>\n      </div>\n      <div className=\"container\">\n        <div className=\"column\">\n          <PublicKeys publicKeys={publicKeys} addKey={handleAddAttribute} isOwner={isOwner} />\n        </div>\n        <div className=\"column\">\n          <ServiceEndPoints endpoints={service} addEndpoint={handleAddAttribute} isOwner={isOwner} />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default IdentityComponent\n","import { ThunkDispatch } from 'redux-thunk'\nimport { connect } from 'react-redux'\nimport { AnyAction } from 'redux'\nimport { DIDDocument, PublicKey } from 'did-resolver'\nimport IdentityComponent from './IdentityComponent'\nimport { stateInterface } from '../state/configureStore'\nimport { setDidOwner, addDelegate, addAttribute } from '../state/operations/ethrdid'\n\nconst getOwnerFromDidDoc = (didDocument: DIDDocument) => {\n  const controller = didDocument.publicKey.filter((pk: PublicKey) => pk.id.endsWith('#controller'))[0]\n  return (typeof controller === 'undefined') ? null : controller.ethereumAddress\n}\n\nconst mapStateToProps = (state: stateInterface) => ({\n  address: state.identity.address,\n  chainId: state.identity.chainId,\n  owner: getOwnerFromDidDoc(state.ethrdid.didDocument),\n  delegates: state.ethrdid.didDocument.publicKey?.filter((pk: PublicKey) => !pk.id.endsWith('controller')),\n  service: state.ethrdid.didDocument.service,\n  publicKeys: state.ethrdid.didDocument.publicKey?.filter((pk: PublicKey) => pk.publicKeyBase64 || pk.publicKeyHex)\n})\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<stateInterface, {}, AnyAction>) => ({\n  changeOwner: (provider: any, newOwner: string) => dispatch(setDidOwner(provider, newOwner)),\n  addDelegate: (provider: any, newDelegate: string) => dispatch(addDelegate(provider, newDelegate)),\n  addAttribute: (provider: any, type: string, value: string, validity: number) =>\n    dispatch(addAttribute(provider, type, value, validity))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IdentityComponent)\n","import React, { useContext, useState } from 'react'\nimport Panel from '../../../components/Panel/Panel'\nimport { Web3ProviderContext } from '../../../providerContext'\nimport { Token } from '../../state/reducers/defi'\nimport { isValidAddress } from 'rskjs-util'\nimport { truncateAddressDid } from '../../../formatters'\nimport BalanceRow from '../../../components/BalanceRow/BalanceRow'\nimport EditValueModal from '../../../components/Modal/EditValueModal'\nimport { getBalanceName } from '../../../config/getConfig'\n\ninterface BalanceInterface {\n  tokens?: Token[]\n  chainId: number\n  balance: number | null,\n  conversion: number | null,\n  addCustomToken: (provider: any, tokenAddress: string) => any\n}\n\nconst Balance: React.FC<BalanceInterface> = ({ tokens, chainId, balance, conversion, addCustomToken }) => {\n  const [isAdding, setIsAdding] = useState<boolean>(false)\n  const [newAddress, setNewAddress] = useState<string>('')\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [isError, setIsError] = useState<string | null>(null)\n\n  const context = useContext(Web3ProviderContext)\n\n  const togglePopup = () => {\n    setIsAdding(!isAdding)\n    setNewAddress('')\n  }\n\n  const addToken = () => {\n    setIsLoading(true)\n    setIsError(null)\n\n    if (!isValidAddress(newAddress)) {\n      setIsLoading(false)\n      return setIsError('Not a valid address!')\n    }\n    addCustomToken(context?.provider, newAddress)\n      .then(() => {\n        setIsLoading(false)\n        setIsAdding(false)\n      })\n      .catch((err: Error) => {\n        setIsLoading(false)\n        setIsError(err.message)\n      })\n  }\n\n  return (\n    <Panel\n      title=\"Assets\"\n      className=\"identity-balance\"\n      headerRight={<button onClick={togglePopup}>Watch Asset</button>}\n    >\n      {balance && (\n        <BalanceRow\n          name=\"Balance\"\n          className=\"defaultBalance\"\n          balance={balance}\n          symbol={getBalanceName(chainId)}\n          conversion={conversion || undefined}\n        />\n      )}\n\n      {tokens?.map((token: Token) =>\n        <BalanceRow\n          key={token.address}\n          name={token.name || `Custom token: ${truncateAddressDid(token.address)}`}\n          balance={token.balance}\n          symbol={token.symbol}\n          conversion={token.conversion}\n        />\n      )}\n\n      <EditValueModal\n        show={isAdding}\n        onClose={togglePopup}\n        disabled={isLoading}\n        error={isError}\n        strings={{\n          title: 'Add Token',\n          intro: 'Add an ERC20 or ERC721 token to the dashboard',\n          label: 'Token to add:',\n          placeholder: 'contract address',\n          submit: 'Add Token'\n        }}\n        onConfirm={addToken}\n      />\n    </Panel>\n  )\n}\n\nexport default Balance\n","import React from 'react'\nimport { Token } from '../state/reducers/defi'\nimport Balance from './panels/Balance'\n\ninterface DeFiComponentInterface {\n  tokens: Token[]\n  chainId: number\n  balance: number | null\n  conversion: number | null\n  addCustomToken: (provider: any, tokenAddr: string) => any\n}\n\nconst DeFiComponent: React.FC<DeFiComponentInterface> = ({ tokens, chainId, balance, conversion, addCustomToken }) => (\n  <div className=\"content defi\">\n    <div className=\"container\">\n      <div className=\"column\">\n        <Balance\n          tokens={tokens}\n          addCustomToken={addCustomToken}\n          chainId={chainId}\n          balance={balance}\n          conversion={conversion}\n        />\n      </div>\n    </div>\n  </div>\n)\n\nexport default DeFiComponent\n","import { ThunkDispatch } from 'redux-thunk'\nimport { connect } from 'react-redux'\nimport { stateInterface } from '../state/configureStore'\nimport DeFiComponent from './DeFiComponent'\nimport { AnyAction } from 'redux'\nimport { addCustomToken } from '../state/operations/defi'\n\nconst mapStateToProps = (state: stateInterface) => ({\n  tokens: state.defi.tokens,\n  chainId: state.identity.chainId,\n  balance: state.defi.balance,\n  conversion: state.defi.conversion\n})\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<stateInterface, {}, AnyAction>) => ({\n  addCustomToken: (provider: any, userAddr: string, tokenAddr: string, chainId: number) => dispatch(addCustomToken(provider, userAddr, tokenAddr, chainId))\n})\n\nconst mergeProps = (stateProps: any, dispatchProps: any, ownProps: any) => ({\n  ...stateProps,\n  ...dispatchProps,\n  ...ownProps,\n  addCustomToken: (provider: any, tokenAddr: string) => dispatchProps.addCustomToken(provider, stateProps.address, tokenAddr, stateProps.chainId)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps, mergeProps)(DeFiComponent)\n","import React, { useContext, useState } from 'react'\nimport DataVaultWebClient from '@rsksmart/ipfs-cpinner-client'\nimport HeaderComponent from './components/HeaderComponent'\nimport Navigation, { screens } from './components/Navigation'\nimport DashboardContainer from '../Dashboard/DashboardContainer'\nimport DataVaultContainer from '../DataVault/DataVaultContainer'\nimport { Web3ProviderContext } from '../../providerContext'\nimport IdentityContainer from '../Identity/IdentityContainer'\nimport { createDidFormat } from '../../formatters'\nimport { DataVaultKey } from '../state/reducers/datavault'\nimport DefiContainer from '../DeFi/DeFiContainer'\n\ninterface AuthenticatedComponentInterface {\n  chainId: number | null\n  address: string | null\n  persona: DataVaultKey\n  modifyMultipleItems: (client: DataVaultWebClient, items: DataVaultKey) => any\n  logout: () => void\n}\n\nconst AuthenticatedComponent: React.FC<AuthenticatedComponentInterface> = ({ chainId, address, persona, modifyMultipleItems, logout }) => {\n  const [screen, setScreen] = useState<screens>(screens.DASHBOARD)\n  const context = useContext(Web3ProviderContext)\n\n  const changeScreen = (screen: screens) => setScreen(screen)\n  const updatePersona = (items: DataVaultKey) => context.dvClient && modifyMultipleItems(context.dvClient, items)\n  const handleLogout = () => {\n    context.reset()\n    logout()\n  }\n\n  return (\n    <>\n      <HeaderComponent\n        chainId={chainId || undefined}\n        did={(address && chainId) ? createDidFormat(address, chainId) : undefined}\n        persona={persona}\n        hasDataVault={!!context.dvClient}\n        updatePersona={updatePersona}\n      />\n      <Navigation\n        selected={screen}\n        handleClick={changeScreen}\n        showDataVault={!!context.dvClient}\n        logout={handleLogout}\n      />\n      {screen === screens.DASHBOARD && <DashboardContainer changeScreen={changeScreen} />}\n      {screen === screens.DATAVAULT && <DataVaultContainer />}\n      {screen === screens.IDENTITY && <IdentityContainer />}\n      {screen === screens.DEFI && <DefiContainer />}\n    </>\n  )\n}\n\nexport default AuthenticatedComponent\n","import { connect } from 'react-redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { AnyAction } from 'redux'\nimport DataVaultWebClient from '@rsksmart/ipfs-cpinner-client'\nimport { stateInterface } from '../state/configureStore'\nimport AuthenticatedComponent from './AuthenticatedComponent'\nimport { modifyMultipleItems } from '../state/operations/datavault'\nimport { DataVaultKey } from '../state/reducers/datavault'\nimport { logout } from '../state/operations/identity'\n\n/**\n * Get items that are specifically to the Persona from the DataVault collection\n * @param data Data from the datavault\n */\nexport const getPersonaDeclarativeDetails = (data: DataVaultKey) => {\n  const personaItems = ['DD_NAME', 'DD_EMAIL', 'DD_ADDRESS', 'DD_IDNUMBER', 'DD_PHONE', 'DD_BIRTHDATE']\n  const returnValueOrEmpty = (key: string) => data[key] && data[key][0] ? data[key] : [{ id: '', content: '' }]\n\n  const values: DataVaultKey = {}\n  personaItems.forEach((key: string) => {\n    values[key] = returnValueOrEmpty(key)\n  })\n\n  return values\n}\n\nconst mapStateToProps = (state: stateInterface) => ({\n  address: state.identity.address,\n  chainId: state.identity.chainId,\n  persona: getPersonaDeclarativeDetails(state.datavault.declarativeDetails)\n})\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<stateInterface, {}, AnyAction>) => ({\n  modifyMultipleItems: (client: DataVaultWebClient, items: DataVaultKey) =>\n    dispatch(modifyMultipleItems(client, items)),\n  logout: () => dispatch(logout())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AuthenticatedComponent)\n","export default __webpack_public_path__ + \"static/media/powered-by-iov.a0397e40.svg\";","export default __webpack_public_path__ + \"static/media/powered-by-iov-gray.e25db553.svg\";","import React from 'react'\nimport powered from '../../assets/images/powered-by-iov.svg'\nimport poweredGray from '../../assets/images/powered-by-iov-gray.svg'\n\ninterface RifFooterInterface {\n  isLoggedIn: boolean\n  version: string\n}\n\nconst RifFooter: React.FC<RifFooterInterface> = ({ isLoggedIn, version }) => (\n  <footer className=\"app-footer\">\n    <img src={isLoggedIn ? poweredGray : powered} alt=\"Powered By IOV\" />\n    <p>Copyright &copy; 2020 IOV Labs. All rights reserved.</p>\n    <p>Version {version}</p>\n  </footer>\n)\n\nexport default RifFooter\n","import React, { useContext } from 'react'\nimport '../assets/scss/_index.scss'\nimport { version } from '../../package.json'\nimport LoginScreenContainer from './Login/LoginScreenContainer'\nimport AuthenticatedContainer from './Authenticated/AuthenticatedContainer'\nimport RifFooter from '../components/RifFooter/RifFooter'\nimport { Web3ProviderContext } from '../providerContext'\n\nconst App = () => {\n  const context = useContext(Web3ProviderContext)\n  const isLoggedIn = context?.provider\n\n  return (\n    <div className={isLoggedIn ? 'app loggedin' : 'app login'}>\n      {isLoggedIn\n        ? <AuthenticatedContainer />\n        : <LoginScreenContainer context={context} />\n      }\n      <RifFooter isLoggedIn={isLoggedIn} version={version} />\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { createLogger } from 'redux-logger'\nimport identityReducer, { IdentityState } from './reducers/identity'\nimport ethrdidReducer, { EtherdidState } from './reducers/ethrdid'\nimport defiReducer, { DefiState } from './reducers/defi'\nimport dataVaultReducer, { DataVaultState } from './reducers/datavault'\n\nconst middleware = [thunk, createLogger()]\n\nexport interface stateInterface {\n  identity: IdentityState\n  ethrdid: EtherdidState\n  defi: DefiState\n  datavault: DataVaultState\n}\n\nconst rootReducer = combineReducers({\n  identity: identityReducer,\n  ethrdid: ethrdidReducer,\n  defi: defiReducer,\n  datavault: dataVaultReducer\n})\n\nconst configureStore = (prelodedState?: any) =>\n  createStore(rootReducer, prelodedState, applyMiddleware(...middleware))\n\nexport default configureStore\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app/App'\nimport { Web3ProviderElement } from './providerContext'\nimport reportWebVitals from './reportWebVitals'\nimport { Provider } from 'react-redux'\nimport configureStore from './app/state/configureStore'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureStore()}>\n      <Web3ProviderElement>\n        <App />\n      </Web3ProviderElement>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}